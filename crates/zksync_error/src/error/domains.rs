
//!
//! AUTOGENERATED BASED ON A SET OF JSON FILES, DO NOT EDIT MANUALLY
//!

#![allow(non_camel_case_types)]
use crate::error::ICustomError;
use crate::error::IUnifiedError;
use crate::kind::Kind;
use strum_macros::AsRefStr;
use strum_macros::EnumDiscriminants;
use strum_macros::FromRepr;
use crate::error::definitions::AnvilEnvironment;
use crate::error::definitions::AnvilEnvironmentCode;
use crate::error::definitions::Halt;
use crate::error::definitions::HaltCode;
use crate::error::definitions::Revert;
use crate::error::definitions::RevertCode;
use crate::error::definitions::StateLoader;
use crate::error::definitions::StateLoaderCode;
use crate::error::definitions::LLVM_EVM;
use crate::error::definitions::LLVM_EVMCode;
use crate::error::definitions::LLVM_Era;
use crate::error::definitions::LLVM_EraCode;
use crate::error::definitions::Solc;
use crate::error::definitions::SolcCode;
use crate::error::definitions::SolcFork;
use crate::error::definitions::SolcForkCode;
use crate::error::definitions::Zksolc;
use crate::error::definitions::ZksolcCode;
use crate::error::definitions::Zkvyper;
use crate::error::definitions::ZkvyperCode;
use crate::error::definitions::API;
use crate::error::definitions::APICode;
use crate::error::definitions::EraVM;
use crate::error::definitions::EraVMCode;
use crate::error::definitions::ExecutionPlatform;
use crate::error::definitions::ExecutionPlatformCode;
use crate::error::definitions::Sequencer;
use crate::error::definitions::SequencerCode;
use crate::error::definitions::FoundryUpstream;
use crate::error::definitions::FoundryUpstreamCode;
use crate::error::definitions::FoundryZksync;
use crate::error::definitions::FoundryZksyncCode;
use crate::error::definitions::HardhatUpstream;
use crate::error::definitions::HardhatUpstreamCode;
use crate::error::definitions::HardhatZksync;
use crate::error::definitions::HardhatZksyncCode;

#[repr(u32)]
#[derive(AsRefStr, Clone, Debug, EnumDiscriminants, Eq, PartialEq, serde::Serialize, serde::Deserialize)]
pub enum ZksyncError {
   Anvil(Anvil), 
   Compiler(Compiler), 
   Core(Core), 
   Foundry(Foundry), 
   Hardhat(Hardhat), 
}

impl crate::documentation::Documented for ZksyncError {
    type Documentation = &'static zksync_error_description::ErrorDocumentation;

    fn get_documentation(&self) -> Result<Option<Self::Documentation>, crate::documentation::DocumentationError> {
        match self {

         ZksyncError::Anvil(Anvil::AnvilEnvironment(error)) => error.get_documentation() ,
         ZksyncError::Anvil(Anvil::Halt(error)) => error.get_documentation() ,
         ZksyncError::Anvil(Anvil::Revert(error)) => error.get_documentation() ,
         ZksyncError::Anvil(Anvil::StateLoader(error)) => error.get_documentation() ,
         ZksyncError::Compiler(Compiler::LLVM_EVM(error)) => error.get_documentation() ,
         ZksyncError::Compiler(Compiler::LLVM_Era(error)) => error.get_documentation() ,
         ZksyncError::Compiler(Compiler::Solc(error)) => error.get_documentation() ,
         ZksyncError::Compiler(Compiler::SolcFork(error)) => error.get_documentation() ,
         ZksyncError::Compiler(Compiler::Zksolc(error)) => error.get_documentation() ,
         ZksyncError::Compiler(Compiler::Zkvyper(error)) => error.get_documentation() ,
         ZksyncError::Core(Core::API(error)) => error.get_documentation() ,
         ZksyncError::Core(Core::EraVM(error)) => error.get_documentation() ,
         ZksyncError::Core(Core::ExecutionPlatform(error)) => error.get_documentation() ,
         ZksyncError::Core(Core::Sequencer(error)) => error.get_documentation() ,
         ZksyncError::Foundry(Foundry::FoundryUpstream(error)) => error.get_documentation() ,
         ZksyncError::Foundry(Foundry::FoundryZksync(error)) => error.get_documentation() ,
         ZksyncError::Hardhat(Hardhat::HardhatUpstream(error)) => error.get_documentation() ,
         ZksyncError::Hardhat(Hardhat::HardhatZksync(error)) => error.get_documentation() ,
      }
   }
}

impl ZksyncError {

    pub fn get_kind(&self) -> crate::kind::Kind {
        match self {
         ZksyncError::Anvil(Anvil::AnvilEnvironment(_)) => { Kind::Anvil(AnvilCode::AnvilEnvironment) },
         ZksyncError::Anvil(Anvil::Halt(_)) => { Kind::Anvil(AnvilCode::Halt) },
         ZksyncError::Anvil(Anvil::Revert(_)) => { Kind::Anvil(AnvilCode::Revert) },
         ZksyncError::Anvil(Anvil::StateLoader(_)) => { Kind::Anvil(AnvilCode::StateLoader) },
         ZksyncError::Compiler(Compiler::LLVM_EVM(_)) => { Kind::Compiler(CompilerCode::LLVM_EVM) },
         ZksyncError::Compiler(Compiler::LLVM_Era(_)) => { Kind::Compiler(CompilerCode::LLVM_Era) },
         ZksyncError::Compiler(Compiler::Solc(_)) => { Kind::Compiler(CompilerCode::Solc) },
         ZksyncError::Compiler(Compiler::SolcFork(_)) => { Kind::Compiler(CompilerCode::SolcFork) },
         ZksyncError::Compiler(Compiler::Zksolc(_)) => { Kind::Compiler(CompilerCode::Zksolc) },
         ZksyncError::Compiler(Compiler::Zkvyper(_)) => { Kind::Compiler(CompilerCode::Zkvyper) },
         ZksyncError::Core(Core::API(_)) => { Kind::Core(CoreCode::API) },
         ZksyncError::Core(Core::EraVM(_)) => { Kind::Core(CoreCode::EraVM) },
         ZksyncError::Core(Core::ExecutionPlatform(_)) => { Kind::Core(CoreCode::ExecutionPlatform) },
         ZksyncError::Core(Core::Sequencer(_)) => { Kind::Core(CoreCode::Sequencer) },
         ZksyncError::Foundry(Foundry::FoundryUpstream(_)) => { Kind::Foundry(FoundryCode::FoundryUpstream) },
         ZksyncError::Foundry(Foundry::FoundryZksync(_)) => { Kind::Foundry(FoundryCode::FoundryZksync) },
         ZksyncError::Hardhat(Hardhat::HardhatUpstream(_)) => { Kind::Hardhat(HardhatCode::HardhatUpstream) },
         ZksyncError::Hardhat(Hardhat::HardhatZksync(_)) => { Kind::Hardhat(HardhatCode::HardhatZksync) },
      }
   }
   
    pub fn get_code(&self) -> u32 {
        match self {
         ZksyncError::Anvil(Anvil::AnvilEnvironment(error)) => { Into::<AnvilEnvironmentCode>::into(error) as u32 },
         ZksyncError::Anvil(Anvil::Halt(error)) => { Into::<HaltCode>::into(error) as u32 },
         ZksyncError::Anvil(Anvil::Revert(error)) => { Into::<RevertCode>::into(error) as u32 },
         ZksyncError::Anvil(Anvil::StateLoader(error)) => { Into::<StateLoaderCode>::into(error) as u32 },
         ZksyncError::Compiler(Compiler::LLVM_EVM(error)) => { Into::<LLVM_EVMCode>::into(error) as u32 },
         ZksyncError::Compiler(Compiler::LLVM_Era(error)) => { Into::<LLVM_EraCode>::into(error) as u32 },
         ZksyncError::Compiler(Compiler::Solc(error)) => { Into::<SolcCode>::into(error) as u32 },
         ZksyncError::Compiler(Compiler::SolcFork(error)) => { Into::<SolcForkCode>::into(error) as u32 },
         ZksyncError::Compiler(Compiler::Zksolc(error)) => { Into::<ZksolcCode>::into(error) as u32 },
         ZksyncError::Compiler(Compiler::Zkvyper(error)) => { Into::<ZkvyperCode>::into(error) as u32 },
         ZksyncError::Core(Core::API(error)) => { Into::<APICode>::into(error) as u32 },
         ZksyncError::Core(Core::EraVM(error)) => { Into::<EraVMCode>::into(error) as u32 },
         ZksyncError::Core(Core::ExecutionPlatform(error)) => { Into::<ExecutionPlatformCode>::into(error) as u32 },
         ZksyncError::Core(Core::Sequencer(error)) => { Into::<SequencerCode>::into(error) as u32 },
         ZksyncError::Foundry(Foundry::FoundryUpstream(error)) => { Into::<FoundryUpstreamCode>::into(error) as u32 },
         ZksyncError::Foundry(Foundry::FoundryZksync(error)) => { Into::<FoundryZksyncCode>::into(error) as u32 },
         ZksyncError::Hardhat(Hardhat::HardhatUpstream(error)) => { Into::<HardhatUpstreamCode>::into(error) as u32 },
         ZksyncError::Hardhat(Hardhat::HardhatZksync(error)) => { Into::<HardhatZksyncCode>::into(error) as u32 },
      }
   }
}

impl std::fmt::Display for ZksyncError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        f.write_fmt(format_args!("{:#?}", self))
    }
}
impl IUnifiedError<ZksyncError> for ZksyncError {}
impl std::error::Error for ZksyncError {}


#[repr(u32)]
#[derive(AsRefStr, Clone, Debug, EnumDiscriminants, Eq, PartialEq, serde::Serialize, serde::Deserialize)]
#[strum_discriminants(name(AnvilCode))]
#[strum_discriminants(derive(serde::Serialize, serde::Deserialize, FromRepr))]
#[strum_discriminants(vis(pub))]
pub enum Anvil {
   AnvilEnvironment(AnvilEnvironment),
   Halt(Halt),
   Revert(Revert),
   StateLoader(StateLoader),
}

impl Anvil {
    pub fn get_name(&self) -> &str {
        self.as_ref()
    }
}



#[repr(u32)]
#[derive(AsRefStr, Clone, Debug, EnumDiscriminants, Eq, PartialEq, serde::Serialize, serde::Deserialize)]
#[strum_discriminants(name(CompilerCode))]
#[strum_discriminants(derive(serde::Serialize, serde::Deserialize, FromRepr))]
#[strum_discriminants(vis(pub))]
pub enum Compiler {
   LLVM_EVM(LLVM_EVM),
   LLVM_Era(LLVM_Era),
   Solc(Solc),
   SolcFork(SolcFork),
   Zksolc(Zksolc),
   Zkvyper(Zkvyper),
}

impl Compiler {
    pub fn get_name(&self) -> &str {
        self.as_ref()
    }
}



#[repr(u32)]
#[derive(AsRefStr, Clone, Debug, EnumDiscriminants, Eq, PartialEq, serde::Serialize, serde::Deserialize)]
#[strum_discriminants(name(CoreCode))]
#[strum_discriminants(derive(serde::Serialize, serde::Deserialize, FromRepr))]
#[strum_discriminants(vis(pub))]
pub enum Core {
   API(API),
   EraVM(EraVM),
   ExecutionPlatform(ExecutionPlatform),
   Sequencer(Sequencer),
}

impl Core {
    pub fn get_name(&self) -> &str {
        self.as_ref()
    }
}



#[repr(u32)]
#[derive(AsRefStr, Clone, Debug, EnumDiscriminants, Eq, PartialEq, serde::Serialize, serde::Deserialize)]
#[strum_discriminants(name(FoundryCode))]
#[strum_discriminants(derive(serde::Serialize, serde::Deserialize, FromRepr))]
#[strum_discriminants(vis(pub))]
pub enum Foundry {
   FoundryUpstream(FoundryUpstream),
   FoundryZksync(FoundryZksync),
}

impl Foundry {
    pub fn get_name(&self) -> &str {
        self.as_ref()
    }
}



#[repr(u32)]
#[derive(AsRefStr, Clone, Debug, EnumDiscriminants, Eq, PartialEq, serde::Serialize, serde::Deserialize)]
#[strum_discriminants(name(HardhatCode))]
#[strum_discriminants(derive(serde::Serialize, serde::Deserialize, FromRepr))]
#[strum_discriminants(vis(pub))]
pub enum Hardhat {
   HardhatUpstream(HardhatUpstream),
   HardhatZksync(HardhatZksync),
}

impl Hardhat {
    pub fn get_name(&self) -> &str {
        self.as_ref()
    }
}



impl ICustomError<ZksyncError, ZksyncError> for AnvilEnvironment {
    fn to_unified(&self) -> ZksyncError {
        ZksyncError::Anvil(Anvil::AnvilEnvironment(self.clone()))
    }
}


impl ICustomError<ZksyncError, ZksyncError> for Halt {
    fn to_unified(&self) -> ZksyncError {
        ZksyncError::Anvil(Anvil::Halt(self.clone()))
    }
}


impl ICustomError<ZksyncError, ZksyncError> for Revert {
    fn to_unified(&self) -> ZksyncError {
        ZksyncError::Anvil(Anvil::Revert(self.clone()))
    }
}


impl ICustomError<ZksyncError, ZksyncError> for StateLoader {
    fn to_unified(&self) -> ZksyncError {
        ZksyncError::Anvil(Anvil::StateLoader(self.clone()))
    }
}


impl ICustomError<ZksyncError, ZksyncError> for LLVM_EVM {
    fn to_unified(&self) -> ZksyncError {
        ZksyncError::Compiler(Compiler::LLVM_EVM(self.clone()))
    }
}


impl ICustomError<ZksyncError, ZksyncError> for LLVM_Era {
    fn to_unified(&self) -> ZksyncError {
        ZksyncError::Compiler(Compiler::LLVM_Era(self.clone()))
    }
}


impl ICustomError<ZksyncError, ZksyncError> for Solc {
    fn to_unified(&self) -> ZksyncError {
        ZksyncError::Compiler(Compiler::Solc(self.clone()))
    }
}


impl ICustomError<ZksyncError, ZksyncError> for SolcFork {
    fn to_unified(&self) -> ZksyncError {
        ZksyncError::Compiler(Compiler::SolcFork(self.clone()))
    }
}


impl ICustomError<ZksyncError, ZksyncError> for Zksolc {
    fn to_unified(&self) -> ZksyncError {
        ZksyncError::Compiler(Compiler::Zksolc(self.clone()))
    }
}


impl ICustomError<ZksyncError, ZksyncError> for Zkvyper {
    fn to_unified(&self) -> ZksyncError {
        ZksyncError::Compiler(Compiler::Zkvyper(self.clone()))
    }
}


impl ICustomError<ZksyncError, ZksyncError> for API {
    fn to_unified(&self) -> ZksyncError {
        ZksyncError::Core(Core::API(self.clone()))
    }
}


impl ICustomError<ZksyncError, ZksyncError> for EraVM {
    fn to_unified(&self) -> ZksyncError {
        ZksyncError::Core(Core::EraVM(self.clone()))
    }
}


impl ICustomError<ZksyncError, ZksyncError> for ExecutionPlatform {
    fn to_unified(&self) -> ZksyncError {
        ZksyncError::Core(Core::ExecutionPlatform(self.clone()))
    }
}


impl ICustomError<ZksyncError, ZksyncError> for Sequencer {
    fn to_unified(&self) -> ZksyncError {
        ZksyncError::Core(Core::Sequencer(self.clone()))
    }
}


impl ICustomError<ZksyncError, ZksyncError> for FoundryUpstream {
    fn to_unified(&self) -> ZksyncError {
        ZksyncError::Foundry(Foundry::FoundryUpstream(self.clone()))
    }
}


impl ICustomError<ZksyncError, ZksyncError> for FoundryZksync {
    fn to_unified(&self) -> ZksyncError {
        ZksyncError::Foundry(Foundry::FoundryZksync(self.clone()))
    }
}


impl ICustomError<ZksyncError, ZksyncError> for HardhatUpstream {
    fn to_unified(&self) -> ZksyncError {
        ZksyncError::Hardhat(Hardhat::HardhatUpstream(self.clone()))
    }
}


impl ICustomError<ZksyncError, ZksyncError> for HardhatZksync {
    fn to_unified(&self) -> ZksyncError {
        ZksyncError::Hardhat(Hardhat::HardhatZksync(self.clone()))
    }
}

