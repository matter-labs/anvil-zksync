//!
//! AUTOGENERATED BASED ON A SET OF JSON FILES, DO NOT EDIT MANUALLY
//!

use strum_macros::{EnumDiscriminants, FromRepr};

use crate::error::domains::AnvilCode;
use crate::error::domains::CompilerCode;
use crate::error::domains::CoreCode;
use crate::error::domains::FoundryCode;
use crate::error::domains::HardhatCode;

#[derive(Clone, Debug, EnumDiscriminants, Eq, PartialEq, serde::Deserialize, serde::Serialize)]
#[strum_discriminants(name(DomainCode))]
#[strum_discriminants(derive(FromRepr))]
#[strum_discriminants(vis(pub))]
#[repr(u32)]
pub enum Kind {
    Anvil(AnvilCode) = 5,
    Compiler(CompilerCode) = 2,
    Core(CoreCode) = 1,
    Foundry(FoundryCode) = 4,
    Hardhat(HardhatCode) = 3,
}

impl Kind {
    pub fn domain_code(&self) -> u32 {
        let domain: DomainCode = self.clone().into();
        domain as u32
    }
    pub fn component_code(&self) -> u32 {
        match self {
            Kind::Anvil(component) => component.clone() as u32,
            Kind::Compiler(component) => component.clone() as u32,
            Kind::Core(component) => component.clone() as u32,
            Kind::Foundry(component) => component.clone() as u32,
            Kind::Hardhat(component) => component.clone() as u32,
        }
    }
}
