{
  "comment": [
    "AUTOGENERATED FILE",
    "DO NOT EDIT MANUALLY",
    "The purpose of this file is to show the combined model, after all the links",
    "between models are resolved and the final model is constructed."
  ],
  "model": {
    "types": {
      "API": {
        "name": "API",
        "meta": {
          "description": "Errors originating in the web3 API."
        },
        "bindings": {
          "rust": {
            "name": "Box<API>",
            "path": ""
          },
          "typescript": {
            "name": "Box<API>",
            "path": ""
          }
        }
      },
      "AnvilEnvironment": {
        "name": "AnvilEnvironment",
        "meta": {
          "description": ""
        },
        "bindings": {
          "rust": {
            "name": "Box<AnvilEnvironment>",
            "path": ""
          },
          "typescript": {
            "name": "Box<AnvilEnvironment>",
            "path": ""
          }
        }
      },
      "AnvilGeneric": {
        "name": "AnvilGeneric",
        "meta": {
          "description": ""
        },
        "bindings": {
          "rust": {
            "name": "Box<AnvilGeneric>",
            "path": ""
          },
          "typescript": {
            "name": "Box<AnvilGeneric>",
            "path": ""
          }
        }
      },
      "EraVM": {
        "name": "EraVM",
        "meta": {
          "description": "Errors in EraVM virtual machine executing contracts."
        },
        "bindings": {
          "rust": {
            "name": "Box<EraVM>",
            "path": ""
          },
          "typescript": {
            "name": "Box<EraVM>",
            "path": ""
          }
        }
      },
      "ExecutionPlatform": {
        "name": "ExecutionPlatform",
        "meta": {
          "description": "Errors in the contract execution environment, bootloader, etc."
        },
        "bindings": {
          "rust": {
            "name": "Box<ExecutionPlatform>",
            "path": ""
          },
          "typescript": {
            "name": "Box<ExecutionPlatform>",
            "path": ""
          }
        }
      },
      "FoundryUpstream": {
        "name": "FoundryUpstream",
        "meta": {
          "description": "Errors originating in the upstream Foundry implementation."
        },
        "bindings": {
          "rust": {
            "name": "Box<FoundryUpstream>",
            "path": ""
          },
          "typescript": {
            "name": "Box<FoundryUpstream>",
            "path": ""
          }
        }
      },
      "FoundryZksync": {
        "name": "FoundryZksync",
        "meta": {
          "description": "Errors originating in the ZKsync codebase for Foundry."
        },
        "bindings": {
          "rust": {
            "name": "Box<FoundryZksync>",
            "path": ""
          },
          "typescript": {
            "name": "Box<FoundryZksync>",
            "path": ""
          }
        }
      },
      "Halt": {
        "name": "Halt",
        "meta": {
          "description": ""
        },
        "bindings": {
          "rust": {
            "name": "Box<Halt>",
            "path": ""
          },
          "typescript": {
            "name": "Box<Halt>",
            "path": ""
          }
        }
      },
      "HardhatUpstream": {
        "name": "HardhatUpstream",
        "meta": {
          "description": "Errors originating in the upstream Hardhat implementation."
        },
        "bindings": {
          "rust": {
            "name": "Box<HardhatUpstream>",
            "path": ""
          },
          "typescript": {
            "name": "Box<HardhatUpstream>",
            "path": ""
          }
        }
      },
      "HardhatZksync": {
        "name": "HardhatZksync",
        "meta": {
          "description": "Errors originating in the ZKsync codebase for HardHat."
        },
        "bindings": {
          "rust": {
            "name": "Box<HardhatZksync>",
            "path": ""
          },
          "typescript": {
            "name": "Box<HardhatZksync>",
            "path": ""
          }
        }
      },
      "LLVM_EVM": {
        "name": "LLVM_EVM",
        "meta": {
          "description": "Errors originating in the compiler backend for Ethereum VM (EVM)."
        },
        "bindings": {
          "rust": {
            "name": "Box<LLVM_EVM>",
            "path": ""
          },
          "typescript": {
            "name": "Box<LLVM_EVM>",
            "path": ""
          }
        }
      },
      "LLVM_Era": {
        "name": "LLVM_Era",
        "meta": {
          "description": "Errors originating in the compiler backend for EraVM."
        },
        "bindings": {
          "rust": {
            "name": "Box<LLVM_Era>",
            "path": ""
          },
          "typescript": {
            "name": "Box<LLVM_Era>",
            "path": ""
          }
        }
      },
      "Revert": {
        "name": "Revert",
        "meta": {
          "description": ""
        },
        "bindings": {
          "rust": {
            "name": "Box<Revert>",
            "path": ""
          },
          "typescript": {
            "name": "Box<Revert>",
            "path": ""
          }
        }
      },
      "Sequencer": {
        "name": "Sequencer",
        "meta": {
          "description": "Errors in the sequencer node"
        },
        "bindings": {
          "rust": {
            "name": "Box<Sequencer>",
            "path": ""
          },
          "typescript": {
            "name": "Box<Sequencer>",
            "path": ""
          }
        }
      },
      "Solc": {
        "name": "Solc",
        "meta": {
          "description": "Errors originating in the official Solidity compiler."
        },
        "bindings": {
          "rust": {
            "name": "Box<Solc>",
            "path": ""
          },
          "typescript": {
            "name": "Box<Solc>",
            "path": ""
          }
        }
      },
      "SolcFork": {
        "name": "SolcFork",
        "meta": {
          "description": "Errors originating in the ZKsync fork of Solidity compiler."
        },
        "bindings": {
          "rust": {
            "name": "Box<SolcFork>",
            "path": ""
          },
          "typescript": {
            "name": "Box<SolcFork>",
            "path": ""
          }
        }
      },
      "WrappedError": {
        "name": "WrappedError",
        "meta": {
          "description": "Any wrapped error"
        },
        "bindings": {
          "rust": {
            "name": "serde_json::Value",
            "path": ""
          }
        }
      },
      "Zksolc": {
        "name": "Zksolc",
        "meta": {
          "description": "Errors originating in the ZKsync Solidity compiler for EraVM and EVM."
        },
        "bindings": {
          "rust": {
            "name": "Box<Zksolc>",
            "path": ""
          },
          "typescript": {
            "name": "Box<Zksolc>",
            "path": ""
          }
        }
      },
      "Zkvyper": {
        "name": "Zkvyper",
        "meta": {
          "description": "Errors originating in the ZKsync Vyper compiler for EraVM."
        },
        "bindings": {
          "rust": {
            "name": "Box<Zkvyper>",
            "path": ""
          },
          "typescript": {
            "name": "Box<Zkvyper>",
            "path": ""
          }
        }
      },
      "bytes": {
        "name": "bytes",
        "meta": {
          "description": "Sequence of bytes"
        },
        "bindings": {
          "rust": {
            "name": "Vec<u8>",
            "path": ""
          }
        }
      },
      "int": {
        "name": "int",
        "meta": {
          "description": "Signed 32-bit integer"
        },
        "bindings": {
          "rust": {
            "name": "i32",
            "path": ""
          }
        }
      },
      "map": {
        "name": "map",
        "meta": {
          "description": "String to string mapping."
        },
        "bindings": {
          "rust": {
            "name": "Vec<(String,String)>",
            "path": ""
          }
        }
      },
      "string": {
        "name": "string",
        "meta": {
          "description": "Unicode zero-terminated string"
        },
        "bindings": {
          "rust": {
            "name": "String",
            "path": ""
          }
        }
      },
      "uint": {
        "name": "uint",
        "meta": {
          "description": "Unsigned 32-bit integer"
        },
        "bindings": {
          "rust": {
            "name": "u32",
            "path": ""
          }
        }
      }
    },
    "domains": {
      "AnvilZKsync": {
        "name": "AnvilZKsync",
        "code": 5,
        "components": [
          "AnvilEnvironment",
          "AnvilGeneric",
          "Halt",
          "Revert"
        ],
        "bindings": {
          "rust": "AnvilZksync",
          "typescript": "AnvilZKsync"
        },
        "identifier": "anvil_zksync",
        "description": "Errors originating in Anvil for ZKsync.",
        "origins": [
          "<default zksync-root.json>",
          "../../etc/errors/anvil.json"
        ]
      },
      "Compiler": {
        "name": "Compiler",
        "code": 2,
        "components": [
          "LLVM_EVM",
          "LLVM_Era",
          "Solc",
          "SolcFork",
          "Zksolc",
          "Zkvyper"
        ],
        "bindings": {
          "rust": "Compiler",
          "typescript": "Compiler"
        },
        "identifier": "compiler",
        "description": "Compilers such as zksolc, zkvyper, solc.",
        "origins": [
          "<default zksync-root.json>"
        ]
      },
      "Core": {
        "name": "Core",
        "code": 1,
        "components": [
          "API",
          "EraVM",
          "ExecutionPlatform",
          "Sequencer"
        ],
        "bindings": {
          "rust": "Core",
          "typescript": "Core"
        },
        "identifier": "core",
        "description": "Errors in core ZKsync components such as sequencer or mempool.",
        "origins": [
          "<default zksync-root.json>"
        ]
      },
      "Foundry": {
        "name": "Foundry",
        "code": 4,
        "components": [
          "FoundryUpstream",
          "FoundryZksync"
        ],
        "bindings": {
          "rust": "Foundry",
          "typescript": "Foundry"
        },
        "identifier": "foundry",
        "description": "Errors originating in Foundry.",
        "origins": [
          "<default zksync-root.json>"
        ]
      },
      "Hardhat": {
        "name": "Hardhat",
        "code": 3,
        "components": [
          "HardhatUpstream",
          "HardhatZksync"
        ],
        "bindings": {
          "rust": "Hardhat",
          "typescript": "Hardhat"
        },
        "identifier": "hardhat",
        "description": "Errors originating in HardHat.",
        "origins": [
          "<default zksync-root.json>"
        ]
      }
    },
    "components": {
      "API": {
        "name": "API",
        "code": 4,
        "domain_name": "Core",
        "bindings": {
          "rust": "API",
          "typescript": "API"
        },
        "identifier": "api",
        "description": "Errors originating in the web3 API.",
        "origins": [
          "<default zksync-root.json>"
        ]
      },
      "AnvilEnvironment": {
        "name": "AnvilEnvironment",
        "code": 1,
        "domain_name": "AnvilZKsync",
        "bindings": {
          "rust": "AnvilEnvironment",
          "typescript": "AnvilEnvironment"
        },
        "identifier": "env",
        "description": "",
        "origins": [
          "../../etc/errors/anvil.json"
        ]
      },
      "AnvilGeneric": {
        "name": "AnvilGeneric",
        "code": 0,
        "domain_name": "AnvilZKsync",
        "bindings": {
          "rust": "AnvilGeneric",
          "typescript": "AnvilGeneric"
        },
        "identifier": "gen",
        "description": "",
        "origins": [
          "../../etc/errors/anvil.json"
        ]
      },
      "EraVM": {
        "name": "EraVM",
        "code": 2,
        "domain_name": "Core",
        "bindings": {
          "rust": "EraVM",
          "typescript": "EraVM"
        },
        "identifier": "eravm",
        "description": "Errors in EraVM virtual machine executing contracts.",
        "origins": [
          "<default zksync-root.json>"
        ]
      },
      "ExecutionPlatform": {
        "name": "ExecutionPlatform",
        "code": 3,
        "domain_name": "Core",
        "bindings": {
          "rust": "ExecutionPlatform",
          "typescript": "ExecutionPlatform"
        },
        "identifier": "exec",
        "description": "Errors in the contract execution environment, bootloader, etc.",
        "origins": [
          "<default zksync-root.json>"
        ]
      },
      "FoundryUpstream": {
        "name": "FoundryUpstream",
        "code": 1,
        "domain_name": "Foundry",
        "bindings": {
          "rust": "FoundryUpstream",
          "typescript": "FoundryUpstream"
        },
        "identifier": "upstream",
        "description": "Errors originating in the upstream Foundry implementation.",
        "origins": [
          "<default zksync-root.json>"
        ]
      },
      "FoundryZksync": {
        "name": "FoundryZksync",
        "code": 2,
        "domain_name": "Foundry",
        "bindings": {
          "rust": "FoundryZksync",
          "typescript": "FoundryZksync"
        },
        "identifier": "zksync",
        "description": "Errors originating in the ZKsync codebase for Foundry.",
        "origins": [
          "<default zksync-root.json>"
        ]
      },
      "Halt": {
        "name": "Halt",
        "code": 2,
        "domain_name": "AnvilZKsync",
        "bindings": {
          "rust": "Halt",
          "typescript": "Halt"
        },
        "identifier": "halt",
        "description": "",
        "origins": [
          "../../etc/errors/anvil.json"
        ]
      },
      "HardhatUpstream": {
        "name": "HardhatUpstream",
        "code": 1,
        "domain_name": "Hardhat",
        "bindings": {
          "rust": "HardhatUpstream",
          "typescript": "HardhatUpstream"
        },
        "identifier": "upstream",
        "description": "Errors originating in the upstream Hardhat implementation.",
        "origins": [
          "<default zksync-root.json>"
        ]
      },
      "HardhatZksync": {
        "name": "HardhatZksync",
        "code": 2,
        "domain_name": "Hardhat",
        "bindings": {
          "rust": "HardhatZksync",
          "typescript": "HardhatZksync"
        },
        "identifier": "zksync",
        "description": "Errors originating in the ZKsync codebase for HardHat.",
        "origins": [
          "<default zksync-root.json>"
        ]
      },
      "LLVM_EVM": {
        "name": "LLVM_EVM",
        "code": 2,
        "domain_name": "Compiler",
        "bindings": {
          "rust": "LLVM_EVM",
          "typescript": "LLVM_EVM"
        },
        "identifier": "llvm+evm",
        "description": "Errors originating in the compiler backend for Ethereum VM (EVM).",
        "origins": [
          "<default zksync-root.json>"
        ]
      },
      "LLVM_Era": {
        "name": "LLVM_Era",
        "code": 1,
        "domain_name": "Compiler",
        "bindings": {
          "rust": "LLVM_Era",
          "typescript": "LLVM_Era"
        },
        "identifier": "llvm+era",
        "description": "Errors originating in the compiler backend for EraVM.",
        "origins": [
          "<default zksync-root.json>"
        ]
      },
      "Revert": {
        "name": "Revert",
        "code": 3,
        "domain_name": "AnvilZKsync",
        "bindings": {
          "rust": "Revert",
          "typescript": "Revert"
        },
        "identifier": "revert",
        "description": "",
        "origins": [
          "../../etc/errors/anvil.json"
        ]
      },
      "Sequencer": {
        "name": "Sequencer",
        "code": 1,
        "domain_name": "Core",
        "bindings": {
          "rust": "Sequencer",
          "typescript": "Sequencer"
        },
        "identifier": "seq",
        "description": "Errors in the sequencer node",
        "origins": [
          "<default zksync-root.json>"
        ]
      },
      "Solc": {
        "name": "Solc",
        "code": 3,
        "domain_name": "Compiler",
        "bindings": {
          "rust": "Solc",
          "typescript": "Solc"
        },
        "identifier": "solc",
        "description": "Errors originating in the official Solidity compiler.",
        "origins": [
          "<default zksync-root.json>"
        ]
      },
      "SolcFork": {
        "name": "SolcFork",
        "code": 4,
        "domain_name": "Compiler",
        "bindings": {
          "rust": "SolcFork",
          "typescript": "SolcFork"
        },
        "identifier": "solc+fork",
        "description": "Errors originating in the ZKsync fork of Solidity compiler.",
        "origins": [
          "<default zksync-root.json>"
        ]
      },
      "Zksolc": {
        "name": "Zksolc",
        "code": 5,
        "domain_name": "Compiler",
        "bindings": {
          "rust": "Zksolc",
          "typescript": "Zksolc"
        },
        "identifier": "zksolc",
        "description": "Errors originating in the ZKsync Solidity compiler for EraVM and EVM.",
        "origins": [
          "<default zksync-root.json>"
        ]
      },
      "Zkvyper": {
        "name": "Zkvyper",
        "code": 6,
        "domain_name": "Compiler",
        "bindings": {
          "rust": "Zkvyper",
          "typescript": "Zkvyper"
        },
        "identifier": "zkvyper",
        "description": "Errors originating in the ZKsync Vyper compiler for EraVM.",
        "origins": [
          "<default zksync-root.json>"
        ]
      }
    },
    "errors": {
      "[anvil_zksync-env-0]": {
        "domain": "AnvilZKsync",
        "component": "AnvilEnvironment",
        "name": "GenericError",
        "code": 0,
        "identifier": "[anvil_zksync-env-0]",
        "message": "Generic error: {message}",
        "fields": [
          {
            "name": "message",
            "type": "string"
          }
        ],
        "documentation": null,
        "bindings": {
          "rust": {
            "name": "GenericError",
            "path": ""
          },
          "typescript": {
            "name": "GenericError",
            "path": ""
          }
        },
        "origins": []
      },
      "[anvil_zksync-env-10]": {
        "domain": "AnvilZKsync",
        "component": "AnvilEnvironment",
        "name": "LogFileAccessFailed",
        "code": 10,
        "identifier": "[anvil_zksync-env-10]",
        "message": "Unable to access log file: {log_file_path}. Details: {wrapped_error}",
        "fields": [
          {
            "name": "log_file_path",
            "type": "string"
          },
          {
            "name": "wrapped_error",
            "type": "string"
          }
        ],
        "documentation": {
          "description": "Anvil-zksync was unable to open log file for writing.\nBy default, the log file is searched for at `./anvil-zksync.log`.\nYou may provide this path explicitly through the CLI argument `--log-file-path`.",
          "summary": "Unable to access log file.",
          "likely_causes": [
            {
              "cause": "Wrong path to log file.",
              "fixes": [
                "Check if you have provided a correct path through `--log-file-path` variable."
              ],
              "report": "",
              "owner": null,
              "references": []
            },
            {
              "cause": "Not enough space in the storage.",
              "fixes": [
                "Free up some space in your storage",
                "Use the CLI argument `--log-file-path` to point anvil-zksync to a log file path on a different storage with sufficient free space available."
              ],
              "report": "",
              "owner": null,
              "references": []
            },
            {
              "cause": "Insufficient permissions.",
              "fixes": [
                "Check if you have permissions to write to the selected log file.",
                "Use the CLI argument `--log-file-path` to point anvil-zksync to a log file path in a location where you have sufficient permissions to create and/or write to it"
              ],
              "report": "",
              "owner": null,
              "references": []
            }
          ]
        },
        "bindings": {
          "rust": {
            "name": "LogFileAccessFailed",
            "path": ""
          },
          "typescript": {
            "name": "LogFileAccessFailed",
            "path": ""
          }
        },
        "origins": [
          "../../etc/errors/anvil.json"
        ]
      },
      "[anvil_zksync-env-11]": {
        "domain": "AnvilZKsync",
        "component": "AnvilEnvironment",
        "name": "LogFileWriteFailed",
        "code": 11,
        "identifier": "[anvil_zksync-env-11]",
        "message": "Unable to append more lines to the log file `{log_filename}`: {wrapped_error}",
        "fields": [
          {
            "name": "log_filename",
            "type": "string"
          },
          {
            "name": "wrapped_error",
            "type": "string"
          }
        ],
        "documentation": {
          "description": "Anvil-zksync was unable to write logs to the selected file.\nBy default, the log file is searched for at `./anvil-zksync.log`.\nYou may provide this path explicitly through the CLI argument `--log-file-path`.",
          "summary": "Unable to append to log file. Details: {wrapped_error}",
          "likely_causes": [
            {
              "cause": "Wrong path to log file",
              "fixes": [
                "Check if you have provided a correct path through `--log-file-path` variable."
              ],
              "report": "",
              "owner": null,
              "references": []
            },
            {
              "cause": "Not enough space in the storage.",
              "fixes": [
                "Free up some space in your storage",
                "Use the CLI argument `--log-file-path` to point anvil-zksync to a log file path on a different storage with sufficient free space available."
              ],
              "report": "",
              "owner": null,
              "references": []
            },
            {
              "cause": "Insufficient permissions.",
              "fixes": [
                "Check if you have permissions to write to the selected log file.",
                "Use the CLI argument `--log-file-path` to point anvil-zksync to a log file path in a location where you have sufficient permissions to create and/or write to it"
              ],
              "report": "",
              "owner": null,
              "references": []
            }
          ]
        },
        "bindings": {
          "rust": {
            "name": "LogFileWriteFailed",
            "path": ""
          },
          "typescript": {
            "name": "LogFileWriteFailed",
            "path": ""
          }
        },
        "origins": [
          "../../etc/errors/anvil.json"
        ]
      },
      "[anvil_zksync-env-1]": {
        "domain": "AnvilZKsync",
        "component": "AnvilEnvironment",
        "name": "InvalidArguments",
        "code": 1,
        "identifier": "[anvil_zksync-env-1]",
        "message": "Invalid arguments: {details}.",
        "fields": [
          {
            "name": "details",
            "type": "string"
          },
          {
            "name": "arguments",
            "type": "string"
          }
        ],
        "documentation": {
          "description": "There are missing or invalid command line arguments, or an invalid combination of arguments is provided.",
          "summary": "Invalid command line arguments provided.",
          "likely_causes": [
            {
              "cause": "Missing an essential argument or an incorrect value is provided.",
              "fixes": [
                "Check the short help on the CLI arguments using `anvil-zksync -h`"
              ],
              "report": "",
              "owner": null,
              "references": []
            }
          ]
        },
        "bindings": {
          "rust": {
            "name": "InvalidArguments",
            "path": ""
          },
          "typescript": {
            "name": "InvalidArguments",
            "path": ""
          }
        },
        "origins": [
          "../../etc/errors/anvil.json"
        ]
      },
      "[anvil_zksync-env-2]": {
        "domain": "AnvilZKsync",
        "component": "AnvilEnvironment",
        "name": "ServerStartupFailed",
        "code": 2,
        "identifier": "[anvil_zksync-env-2]",
        "message": "Failed to start server at {host_requested}:{port_requested}: {details}.",
        "fields": [
          {
            "name": "host_requested",
            "type": "string"
          },
          {
            "name": "port_requested",
            "type": "uint"
          },
          {
            "name": "details",
            "type": "string"
          }
        ],
        "documentation": {
          "description": "Anvil-zksync starts the server and listens to requests on a specified host and port, 0.0.0.0:8011 by default. They are configurable using `--host` and `--port` command line arguments.\n\nThe host and port used by anvil-zksync are also displayed when you start anvil-zksync:\n\n```\n========================================\nListening on 0.0.0.0:8011\n========================================\n```\n\nThis error indicates that listening on the specified host and port failed.",
          "summary": "Failed to start the server and bind it to the requested host and port.",
          "likely_causes": [
            {
              "cause": "You don't have permission to use specified host and port",
              "fixes": [
                "Check your firewall settings",
                "Try with a different port"
              ],
              "report": "",
              "owner": null,
              "references": []
            },
            {
              "cause": "The selected port is in use",
              "fixes": [
                "Check currently running applications that might use the port you want",
                "Try with a different port"
              ],
              "report": "",
              "owner": null,
              "references": []
            }
          ]
        },
        "bindings": {
          "rust": {
            "name": "ServerStartupFailed",
            "path": ""
          },
          "typescript": {
            "name": "ServerStartupFailed",
            "path": ""
          }
        },
        "origins": [
          "../../etc/errors/anvil.json"
        ]
      },
      "[anvil_zksync-gen-0]": {
        "domain": "AnvilZKsync",
        "component": "AnvilGeneric",
        "name": "GenericError",
        "code": 0,
        "identifier": "[anvil_zksync-gen-0]",
        "message": "Generic error: {message}",
        "fields": [
          {
            "name": "message",
            "type": "string"
          }
        ],
        "documentation": null,
        "bindings": {
          "rust": {
            "name": "GenericError",
            "path": ""
          },
          "typescript": {
            "name": "GenericError",
            "path": ""
          }
        },
        "origins": []
      },
      "[anvil_zksync-halt-0]": {
        "domain": "AnvilZKsync",
        "component": "Halt",
        "name": "GenericError",
        "code": 0,
        "identifier": "[anvil_zksync-halt-0]",
        "message": "Generic error: {message}",
        "fields": [
          {
            "name": "message",
            "type": "string"
          }
        ],
        "documentation": null,
        "bindings": {
          "rust": {
            "name": "GenericError",
            "path": ""
          },
          "typescript": {
            "name": "GenericError",
            "path": ""
          }
        },
        "origins": []
      },
      "[anvil_zksync-halt-10]": {
        "domain": "AnvilZKsync",
        "component": "Halt",
        "name": "UnexpectedVMBehavior",
        "code": 10,
        "identifier": "[anvil_zksync-halt-10]",
        "message": "Virtual machine entered unexpected state. Error description: {problem}",
        "fields": [
          {
            "name": "problem",
            "type": "string"
          }
        ],
        "documentation": {
          "description": "This error can be triggered by various bootloader anomalies such as mismatched fee parameters (e.g., baseFee greater than maxFeePerGas), unaccepted pubdata price, failed system calls (like L1 messenger or System Context), or internal assertion failures.",
          "summary": "The bootloader encountered an unexpected state.",
          "likely_causes": [
            {
              "cause": "Fee misconfiguration, failing L1 messenger/system calls, or assertion errors leading to a situation the VM could not handle.",
              "fixes": [
                "Check transaction logs and debug output to pinpoint the exact failing operation.",
                "Verify fee settings (including baseFee and maxFeePerGas), pubdata price, and any external calls to L1 messenger or system context.",
                "If unresolved, contact the development team with detailed logs and transaction data."
              ],
              "report": "",
              "owner": null,
              "references": []
            }
          ]
        },
        "bindings": {
          "rust": {
            "name": "UnexpectedVMBehavior",
            "path": ""
          },
          "typescript": {
            "name": "UnexpectedVMBehavior",
            "path": ""
          }
        },
        "origins": [
          "../../etc/errors/anvil.json"
        ]
      },
      "[anvil_zksync-halt-11]": {
        "domain": "AnvilZKsync",
        "component": "Halt",
        "name": "BootloaderOutOfGas",
        "code": 11,
        "identifier": "[anvil_zksync-halt-11]",
        "message": "Bootloader out of gas",
        "fields": [],
        "documentation": {
          "description": "This error occurs when the bootloader does not have enough gas to continue executing the transaction.",
          "summary": "The bootloader has run out of gas.",
          "likely_causes": [
            {
              "cause": "Insufficient gas limit set for the transaction.",
              "fixes": [
                "Increase the gas limit for the transaction.",
                "Optimize the transaction to consume less gas."
              ],
              "report": "",
              "owner": null,
              "references": []
            }
          ]
        },
        "bindings": {
          "rust": {
            "name": "BootloaderOutOfGas",
            "path": ""
          },
          "typescript": {
            "name": "BootloaderOutOfGas",
            "path": ""
          }
        },
        "origins": [
          "../../etc/errors/anvil.json"
        ]
      },
      "[anvil_zksync-halt-12]": {
        "domain": "AnvilZKsync",
        "component": "Halt",
        "name": "ValidationOutOfGas",
        "code": 12,
        "identifier": "[anvil_zksync-halt-12]",
        "message": "Validation run out of gas",
        "fields": [],
        "documentation": {
          "description": "Validation step of transaction execution exceeds the allocated gas limit.",
          "summary": "The validation step ran out of gas.",
          "likely_causes": [
            {
              "cause": "Insufficient gas limit set for the transaction.",
              "fixes": [
                "Increase the gas limit for the transaction.",
                "Optimize the transaction to consume less gas."
              ],
              "report": "",
              "owner": null,
              "references": []
            }
          ]
        },
        "bindings": {
          "rust": {
            "name": "ValidationOutOfGas",
            "path": ""
          },
          "typescript": {
            "name": "ValidationOutOfGas",
            "path": ""
          }
        },
        "origins": [
          "../../etc/errors/anvil.json"
        ]
      },
      "[anvil_zksync-halt-13]": {
        "domain": "AnvilZKsync",
        "component": "Halt",
        "name": "TooBigGasLimit",
        "code": 13,
        "identifier": "[anvil_zksync-halt-13]",
        "message": "Transaction has a too big ergs limit and will not be executed by the server",
        "fields": [],
        "documentation": {
          "description": "This error occurs when the gas limit set for the transaction is too large for the server to handle.",
          "summary": "The transaction's gas limit is excessively high.",
          "likely_causes": [
            {
              "cause": "Setting an unrealistically high gas limit for the transaction.",
              "fixes": [
                "Adjust the gas limit to a reasonable value."
              ],
              "report": "",
              "owner": null,
              "references": []
            }
          ]
        },
        "bindings": {
          "rust": {
            "name": "TooBigGasLimit",
            "path": ""
          },
          "typescript": {
            "name": "TooBigGasLimit",
            "path": ""
          }
        },
        "origins": [
          "../../etc/errors/anvil.json"
        ]
      },
      "[anvil_zksync-halt-14]": {
        "domain": "AnvilZKsync",
        "component": "Halt",
        "name": "NotEnoughGasProvided",
        "code": 14,
        "identifier": "[anvil_zksync-halt-14]",
        "message": "Bootloader does not have enough gas to proceed with the transaction.",
        "fields": [],
        "documentation": {
          "description": "The bootloader checks if it can supply the requested gas plus overhead. If the remaining gas is below this threshold, it reverts.",
          "summary": "Insufficient gas for the bootloader to continue the transaction.",
          "likely_causes": [
            {
              "cause": "User-specified gas limit is lower than the combined operational and overhead needs.",
              "fixes": [
                "Increase the gas limit to cover both the transaction and overhead costs.",
                "Use gas estimation methods to avoid under-provisioning."
              ],
              "report": "",
              "owner": null,
              "references": []
            }
          ]
        },
        "bindings": {
          "rust": {
            "name": "NotEnoughGasProvided",
            "path": ""
          },
          "typescript": {
            "name": "NotEnoughGasProvided",
            "path": ""
          }
        },
        "origins": [
          "../../etc/errors/anvil.json"
        ]
      },
      "[anvil_zksync-halt-15]": {
        "domain": "AnvilZKsync",
        "component": "Halt",
        "name": "MissingInvocationLimitReached",
        "code": 15,
        "identifier": "[anvil_zksync-halt-15]",
        "message": "Transaction produced too much storage accesses.",
        "fields": [],
        "documentation": {
          "description": "This error occurs when the transaction makes too many missing invocations to memory, surpassing the allowed limit.",
          "summary": "The transaction exceeded the allowed number of storage invocations.",
          "likely_causes": [
            {
              "cause": "Highly complex transaction with excessive memory accesses.",
              "fixes": [
                "Optimize the transaction to reduce the number of memory accesses."
              ],
              "report": "",
              "owner": null,
              "references": []
            }
          ]
        },
        "bindings": {
          "rust": {
            "name": "MissingInvocationLimitReached",
            "path": ""
          },
          "typescript": {
            "name": "MissingInvocationLimitReached",
            "path": ""
          }
        },
        "origins": [
          "../../etc/errors/anvil.json"
        ]
      },
      "[anvil_zksync-halt-16]": {
        "domain": "AnvilZKsync",
        "component": "Halt",
        "name": "FailedToSetL2Block",
        "code": 16,
        "identifier": "[anvil_zksync-halt-16]",
        "message": "Failed to set information about the L2 block: {msg}",
        "fields": [
          {
            "name": "msg",
            "type": "string"
          }
        ],
        "documentation": {
          "description": "System failed to set the necessary information for the L2 block during execution.",
          "summary": "Unable to set L2 block information.",
          "likely_causes": [
            {
              "cause": "Invalid L2 block data or internal processing error.",
              "fixes": [
                "Verify the L2 block information being set.",
                "Check for any internal processing issues that might prevent setting the L2 block."
              ],
              "report": "",
              "owner": null,
              "references": []
            }
          ]
        },
        "bindings": {
          "rust": {
            "name": "FailedToSetL2Block",
            "path": ""
          },
          "typescript": {
            "name": "FailedToSetL2Block",
            "path": ""
          }
        },
        "origins": [
          "../../etc/errors/anvil.json"
        ]
      },
      "[anvil_zksync-halt-17]": {
        "domain": "AnvilZKsync",
        "component": "Halt",
        "name": "FailedToAppendTransactionToL2Block",
        "code": 17,
        "identifier": "[anvil_zksync-halt-17]",
        "message": "Failed to append the transaction to the current L2 block: {msg}",
        "fields": [
          {
            "name": "msg",
            "type": "string"
          }
        ],
        "documentation": {
          "description": "The system context call to record this transaction in the current L2 block failed. Common causes include invalid or corrupted L2 block data, insufficient gas, or unforeseen internal errors in the system context.",
          "summary": "Unable to append the transaction hash to the ongoing L2 block.",
          "likely_causes": [
            {
              "cause": "System context call failure or an invalid L2 block state (e.g., corrupted data, insufficient resources).",
              "fixes": [
                "Verify the system context call logs and ensure there is enough gas.",
                "Check for any data inconsistencies or corrupt block information."
              ],
              "report": "",
              "owner": null,
              "references": []
            }
          ]
        },
        "bindings": {
          "rust": {
            "name": "FailedToAppendTransactionToL2Block",
            "path": ""
          },
          "typescript": {
            "name": "FailedToAppendTransactionToL2Block",
            "path": ""
          }
        },
        "origins": [
          "../../etc/errors/anvil.json"
        ]
      },
      "[anvil_zksync-halt-18]": {
        "domain": "AnvilZKsync",
        "component": "Halt",
        "name": "VMPanic",
        "code": 18,
        "identifier": "[anvil_zksync-halt-18]",
        "message": "VM panicked",
        "fields": [],
        "documentation": {
          "description": "VM experiences a critical failure and panic during transaction execution.",
          "summary": "The virtual machine encountered a panic.",
          "likely_causes": [
            {
              "cause": "Uncaught exception or critical internal error within the VM.",
              "fixes": [
                "Review the transaction for any operations that might cause the VM to panic."
              ],
              "report": "",
              "owner": null,
              "references": []
            }
          ]
        },
        "bindings": {
          "rust": {
            "name": "VMPanic",
            "path": ""
          },
          "typescript": {
            "name": "VMPanic",
            "path": ""
          }
        },
        "origins": [
          "../../etc/errors/anvil.json"
        ]
      },
      "[anvil_zksync-halt-19]": {
        "domain": "AnvilZKsync",
        "component": "Halt",
        "name": "TracerCustom",
        "code": 19,
        "identifier": "[anvil_zksync-halt-19]",
        "message": "Tracer aborted execution: {msg}",
        "fields": [
          {
            "name": "msg",
            "type": "string"
          }
        ],
        "documentation": {
          "description": "Custom tracer used during transaction execution decides to abort the process, typically due to specific conditions being met.",
          "summary": "Tracer aborted the transaction execution.",
          "likely_causes": [
            {
              "cause": "Custom tracer conditions not met or detected an issue.",
              "fixes": [
                "Review the tracer's logic to understand why it aborted the execution."
              ],
              "report": "",
              "owner": null,
              "references": []
            }
          ]
        },
        "bindings": {
          "rust": {
            "name": "TracerCustom",
            "path": ""
          },
          "typescript": {
            "name": "TracerCustom",
            "path": ""
          }
        },
        "origins": [
          "../../etc/errors/anvil.json"
        ]
      },
      "[anvil_zksync-halt-1]": {
        "domain": "AnvilZKsync",
        "component": "Halt",
        "name": "ValidationFailed",
        "code": 1,
        "identifier": "[anvil_zksync-halt-1]",
        "message": "Account validation error: {msg}: {data}",
        "fields": [
          {
            "name": "msg",
            "type": "string"
          },
          {
            "name": "data",
            "type": "string"
          }
        ],
        "documentation": {
          "description": "This error occurs when the account validation step fails during the verification and execution of a transaction.",
          "summary": "Account validation failed during execution.",
          "likely_causes": [
            {
              "cause": "Insufficient funds to cover transaction costs.",
              "fixes": [
                "Add enough balance to the account to pay for gas and the transaction amount."
              ],
              "report": "",
              "owner": null,
              "references": []
            },
            {
              "cause": "Invalid account state or credentials.",
              "fixes": [
                "Verify that the account used has a valid signature and nonce."
              ],
              "report": "",
              "owner": null,
              "references": []
            }
          ]
        },
        "bindings": {
          "rust": {
            "name": "ValidationFailed",
            "path": ""
          },
          "typescript": {
            "name": "ValidationFailed",
            "path": ""
          }
        },
        "origins": [
          "../../etc/errors/anvil.json"
        ]
      },
      "[anvil_zksync-halt-20]": {
        "domain": "AnvilZKsync",
        "component": "Halt",
        "name": "FailedToPublishCompressedBytecodes",
        "code": 20,
        "identifier": "[anvil_zksync-halt-20]",
        "message": "Failed to publish compressed bytecodes",
        "fields": [],
        "documentation": {
          "description": "Emitted when the system fails to publish the compressed bytecodes during execution.",
          "summary": "Unable to publish compressed bytecodes.",
          "likely_causes": [
            {
              "cause": "Compression failure or network issues during publishing.",
              "fixes": [
                "Ensure the compression is functioning correctly."
              ],
              "report": "",
              "owner": null,
              "references": []
            }
          ]
        },
        "bindings": {
          "rust": {
            "name": "FailedToPublishCompressedBytecodes",
            "path": ""
          },
          "typescript": {
            "name": "FailedToPublishCompressedBytecodes",
            "path": ""
          }
        },
        "origins": [
          "../../etc/errors/anvil.json"
        ]
      },
      "[anvil_zksync-halt-21]": {
        "domain": "AnvilZKsync",
        "component": "Halt",
        "name": "FailedBlockTimestampAssertion",
        "code": 21,
        "identifier": "[anvil_zksync-halt-21]",
        "message": "Transaction failed `block.timestamp` assertion",
        "fields": [],
        "documentation": {
          "description": "This error often occurs if the transaction's timestamp is behind the last known block or conflicts with expected chronological order.",
          "summary": "Block timestamp assertion failed during the transaction.",
          "likely_causes": [
            {
              "cause": "Transaction timestamp is out of sync with the previously produced block's timestamp (possible backward time travel).",
              "fixes": [
                "Ensure the block timestamp is set to the correct or forward time.",
                "If using time manipulation APIs, shift the block time so it is strictly after the most recent block."
              ],
              "report": "",
              "owner": null,
              "references": []
            }
          ]
        },
        "bindings": {
          "rust": {
            "name": "FailedBlockTimestampAssertion",
            "path": ""
          },
          "typescript": {
            "name": "FailedBlockTimestampAssertion",
            "path": ""
          }
        },
        "origins": [
          "../../etc/errors/anvil.json"
        ]
      },
      "[anvil_zksync-halt-2]": {
        "domain": "AnvilZKsync",
        "component": "Halt",
        "name": "PaymasterValidationFailed",
        "code": 2,
        "identifier": "[anvil_zksync-halt-2]",
        "message": "Paymaster validation error: {msg}: {data}.",
        "fields": [
          {
            "name": "msg",
            "type": "string"
          },
          {
            "name": "data",
            "type": "string"
          }
        ],
        "documentation": {
          "description": "This error is emitted when the paymaster validation process fails during transaction execution.",
          "summary": "Paymaster validation failed.",
          "likely_causes": [
            {
              "cause": "Invalid paymaster parameters, insufficient funds or unmet validation conditions.",
              "fixes": [
                "Check the paymaster validation conditions and ensure all parameters are correct.",
                "Ensure the paymaster account has sufficient funds to cover the transaction fees."
              ],
              "report": "",
              "owner": null,
              "references": []
            }
          ]
        },
        "bindings": {
          "rust": {
            "name": "PaymasterValidationFailed",
            "path": ""
          },
          "typescript": {
            "name": "PaymasterValidationFailed",
            "path": ""
          }
        },
        "origins": [
          "../../etc/errors/anvil.json"
        ]
      },
      "[anvil_zksync-halt-3]": {
        "domain": "AnvilZKsync",
        "component": "Halt",
        "name": "PrePaymasterPreparationFailed",
        "code": 3,
        "identifier": "[anvil_zksync-halt-3]",
        "message": "Pre-paymaster preparation error: {msg}: {data}",
        "fields": [
          {
            "name": "msg",
            "type": "string"
          },
          {
            "name": "data",
            "type": "string"
          }
        ],
        "documentation": {
          "description": "This error occurs during pre-transaction paymaster preparation if the paymaster input is too short (less than 4 bytes) or its selector is unsupported.",
          "summary": "Pre-paymaster preparation step failed.",
          "likely_causes": [
            {
              "cause": "Invalid or improperly formatted paymaster input.",
              "fixes": [
                "Ensure that the paymaster input is at least 4 bytes long.",
                "For approval-based flows, confirm that the paymaster input is at least 68 bytes long and correctly encodes the token address and minimum allowance.",
                "Verify that the first 4 bytes of the paymaster input (the selector) match a supported paymaster flow (either approval-based or general)."
              ],
              "report": "",
              "owner": null,
              "references": []
            }
          ]
        },
        "bindings": {
          "rust": {
            "name": "PrePaymasterPreparationFailed",
            "path": ""
          },
          "typescript": {
            "name": "PrePaymasterPreparationFailed",
            "path": ""
          }
        },
        "origins": [
          "../../etc/errors/anvil.json"
        ]
      },
      "[anvil_zksync-halt-4]": {
        "domain": "AnvilZKsync",
        "component": "Halt",
        "name": "PayForTxFailed",
        "code": 4,
        "identifier": "[anvil_zksync-halt-4]",
        "message": "Failed to pay for the transaction: {msg}: {data}",
        "fields": [
          {
            "name": "msg",
            "type": "string"
          },
          {
            "name": "data",
            "type": "string"
          }
        ],
        "documentation": {
          "description": "This error is emitted when the system fails to deduct the required fees for executing the transaction.",
          "summary": "Payment for the transaction failed.",
          "likely_causes": [
            {
              "cause": "Insufficient funds to cover the transaction fee.",
              "fixes": [
                "Ensure the account balance is sufficient to cover the fee (maxFeePerGas * gasLimit)."
              ],
              "report": "",
              "owner": null,
              "references": []
            },
            {
              "cause": "Incorrect transaction fee configuration (maxFeePerGas or gasLimit).",
              "fixes": [
                "Verify that the maxFeePerGas and gasLimit values are correctly set to reflect the intended fee, and ensure they are within the limits of the account's balance."
              ],
              "report": "",
              "owner": null,
              "references": []
            }
          ]
        },
        "bindings": {
          "rust": {
            "name": "PayForTxFailed",
            "path": ""
          },
          "typescript": {
            "name": "PayForTxFailed",
            "path": ""
          }
        },
        "origins": [
          "../../etc/errors/anvil.json"
        ]
      },
      "[anvil_zksync-halt-5]": {
        "domain": "AnvilZKsync",
        "component": "Halt",
        "name": "FailedToMarkFactoryDependencies",
        "code": 5,
        "identifier": "[anvil_zksync-halt-5]",
        "message": "Failed to mark factory dependencies: {msg}: {data}",
        "fields": [
          {
            "name": "msg",
            "type": "string"
          },
          {
            "name": "data",
            "type": "string"
          }
        ],
        "documentation": {
          "description": "This error occurs when the system is unable to mark the factory dependencies for an L1 transaction in the known code storage. For L1 transactions, factory dependencies must be recorded as known to ensure that all required code components are available. A failure here may indicate that the dependency data is missing or malformed.",
          "summary": "Failed to register factory dependencies for L1 transactions.",
          "likely_causes": [
            {
              "cause": "Missing or incorrectly formatted factory dependencies.",
              "fixes": [
                "Ensure that all required factory dependencies are provided and correctly formatted in the transaction."
              ],
              "report": "",
              "owner": null,
              "references": []
            }
          ]
        },
        "bindings": {
          "rust": {
            "name": "FailedToMarkFactoryDependencies",
            "path": ""
          },
          "typescript": {
            "name": "FailedToMarkFactoryDependencies",
            "path": ""
          }
        },
        "origins": [
          "../../etc/errors/anvil.json"
        ]
      },
      "[anvil_zksync-halt-6]": {
        "domain": "AnvilZKsync",
        "component": "Halt",
        "name": "FailedToChargeFee",
        "code": 6,
        "identifier": "[anvil_zksync-halt-6]",
        "message": "Failed to charge fee: {msg}: {data}",
        "fields": [
          {
            "name": "msg",
            "type": "string"
          },
          {
            "name": "data",
            "type": "string"
          }
        ],
        "documentation": {
          "description": "This error is raised when the funds transferred to the bootloader are insufficient compared to the required fee (calculated as gasLimit * gasPrice). This may occur when the payer (account or paymaster) does not send enough ETH or when fee parameters are misconfigured.",
          "summary": "Transaction fee deduction failed.",
          "likely_causes": [
            {
              "cause": "Insufficient funds in the payer's account.",
              "fixes": [
                "Ensure that the account or paymaster has enough balance to cover the fee (gasLimit * gasPrice)."
              ],
              "report": "",
              "owner": null,
              "references": []
            },
            {
              "cause": "Incorrect fee parameters (gasLimit or gasPrice).",
              "fixes": [
                "Verify that the gas limit and gas price values are correctly set and reflect the expected transaction costs."
              ],
              "report": "",
              "owner": null,
              "references": []
            }
          ]
        },
        "bindings": {
          "rust": {
            "name": "FailedToChargeFee",
            "path": ""
          },
          "typescript": {
            "name": "FailedToChargeFee",
            "path": ""
          }
        },
        "origins": [
          "../../etc/errors/anvil.json"
        ]
      },
      "[anvil_zksync-halt-7]": {
        "domain": "AnvilZKsync",
        "component": "Halt",
        "name": "FromIsNotAnAccount",
        "code": 7,
        "identifier": "[anvil_zksync-halt-7]",
        "message": "Sender is not an account",
        "fields": [],
        "documentation": {
          "description": "This error occurs when a transaction is attempted from an address that has not been deployed as an account, meaning the `from` address is just a contract.",
          "summary": "The sender address is not a valid account.",
          "likely_causes": [
            {
              "cause": "Account not deployed with `createAccount` or `create2Account`",
              "fixes": [
                "Ensure that the `from` address is an account deployed using `createAccount` or `create2Account`."
              ],
              "report": "",
              "owner": null,
              "references": []
            }
          ]
        },
        "bindings": {
          "rust": {
            "name": "FromIsNotAnAccount",
            "path": ""
          },
          "typescript": {
            "name": "FromIsNotAnAccount",
            "path": ""
          }
        },
        "origins": [
          "../../etc/errors/anvil.json"
        ]
      },
      "[anvil_zksync-halt-8]": {
        "domain": "AnvilZKsync",
        "component": "Halt",
        "name": "InnerTxError",
        "code": 8,
        "identifier": "[anvil_zksync-halt-8]",
        "message": "Bootloader-based tx failed",
        "fields": [],
        "documentation": {
          "description": "Transaction reverted due to a contract call that failed during execution.",
          "summary": "An inner transaction error occurred.",
          "likely_causes": [
            {
              "cause": "Contract function call failed.",
              "fixes": [
                "Review contract function logic for potential issues."
              ],
              "report": "",
              "owner": null,
              "references": []
            }
          ]
        },
        "bindings": {
          "rust": {
            "name": "InnerTxError",
            "path": ""
          },
          "typescript": {
            "name": "InnerTxError",
            "path": ""
          }
        },
        "origins": [
          "../../etc/errors/anvil.json"
        ]
      },
      "[anvil_zksync-halt-9]": {
        "domain": "AnvilZKsync",
        "component": "Halt",
        "name": "Unknown",
        "code": 9,
        "identifier": "[anvil_zksync-halt-9]",
        "message": "Unknown reason: {msg}: {data}",
        "fields": [
          {
            "name": "msg",
            "type": "string"
          },
          {
            "name": "data",
            "type": "string"
          }
        ],
        "documentation": {
          "description": "This error is emitted when the system encounters an unspecified reason for halting.",
          "summary": "An unknown error occurred.",
          "likely_causes": [
            {
              "cause": "Unexpected or unhandled VM state, or insufficient gas.",
              "fixes": [
                "Ensure the transaction parameters are correct and the gas limit is sufficient."
              ],
              "report": "",
              "owner": null,
              "references": []
            }
          ]
        },
        "bindings": {
          "rust": {
            "name": "Unknown",
            "path": ""
          },
          "typescript": {
            "name": "Unknown",
            "path": ""
          }
        },
        "origins": [
          "../../etc/errors/anvil.json"
        ]
      },
      "[anvil_zksync-revert-0]": {
        "domain": "AnvilZKsync",
        "component": "Revert",
        "name": "GenericError",
        "code": 0,
        "identifier": "[anvil_zksync-revert-0]",
        "message": "Generic error: {message}",
        "fields": [
          {
            "name": "message",
            "type": "string"
          }
        ],
        "documentation": null,
        "bindings": {
          "rust": {
            "name": "GenericError",
            "path": ""
          },
          "typescript": {
            "name": "GenericError",
            "path": ""
          }
        },
        "origins": []
      },
      "[anvil_zksync-revert-1]": {
        "domain": "AnvilZKsync",
        "component": "Revert",
        "name": "General",
        "code": 1,
        "identifier": "[anvil_zksync-revert-1]",
        "message": "General revert error: {msg}",
        "fields": [
          {
            "name": "msg",
            "type": "string"
          },
          {
            "name": "data",
            "type": "bytes"
          }
        ],
        "documentation": {
          "description": "This error indicates that the transaction execution was reverted.",
          "summary": "Execution reverted due to a failure.",
          "likely_causes": [
            {
              "cause": "The smart contract encountered a condition that triggered a revert. Common reasons include:",
              "fixes": [
                "Check the transaction parameters, such as sender address, function inputs, and required permissions.",
                "Ensure that the contract state allows the operation (e.g., the caller has the required role or balance).",
                "Check the transaction logs and VM trace for deeper debugging."
              ],
              "report": "",
              "owner": null,
              "references": []
            }
          ]
        },
        "bindings": {
          "rust": {
            "name": "General",
            "path": ""
          },
          "typescript": {
            "name": "General",
            "path": ""
          }
        },
        "origins": [
          "../../etc/errors/anvil.json"
        ]
      },
      "[anvil_zksync-revert-2]": {
        "domain": "AnvilZKsync",
        "component": "Revert",
        "name": "InnerTxError",
        "code": 2,
        "identifier": "[anvil_zksync-revert-2]",
        "message": "Bootloader-based transaction failed.",
        "fields": [],
        "documentation": {
          "description": "This error is emitted when an inner transaction within the VM fails, typically related to bootloader execution.",
          "summary": "An inner transaction error occurred.",
          "likely_causes": [
            {
              "cause": "Failure in executing a nested transaction within the VM.",
              "fixes": [
                "Check the inner transaction details for errors.",
                "Ensure that all prerequisites for the nested transaction are met."
              ],
              "report": "",
              "owner": null,
              "references": []
            }
          ]
        },
        "bindings": {
          "rust": {
            "name": "InnerTxError",
            "path": ""
          },
          "typescript": {
            "name": "InnerTxError",
            "path": ""
          }
        },
        "origins": [
          "../../etc/errors/anvil.json"
        ]
      },
      "[anvil_zksync-revert-3]": {
        "domain": "AnvilZKsync",
        "component": "Revert",
        "name": "VmError",
        "code": 3,
        "identifier": "[anvil_zksync-revert-3]",
        "message": "VM Error",
        "fields": [],
        "documentation": {
          "description": "This error indicates a generic failure within the VM, without specific details.",
          "summary": "A generic VM error.",
          "likely_causes": [
            {
              "cause": "A non-specific internal error within the VM.",
              "fixes": [
                "Review the VM logs for more detailed information."
              ],
              "report": "",
              "owner": null,
              "references": []
            }
          ]
        },
        "bindings": {
          "rust": {
            "name": "VmError",
            "path": ""
          },
          "typescript": {
            "name": "VmError",
            "path": ""
          }
        },
        "origins": [
          "../../etc/errors/anvil.json"
        ]
      },
      "[anvil_zksync-revert-4]": {
        "domain": "AnvilZKsync",
        "component": "Revert",
        "name": "Unknown",
        "code": 4,
        "identifier": "[anvil_zksync-revert-4]",
        "message": "Unknown VM revert reason: function_selector={function_selector}, data={data}",
        "fields": [
          {
            "name": "function_selector",
            "type": "string"
          },
          {
            "name": "data",
            "type": "string"
          }
        ],
        "documentation": {
          "description": "This error is emitted when the VM encounters a revert reason that is not recognized. In most cases, this error may also indicate that the transaction exhausted all the gas allocated for its execution.",
          "summary": "An unknown VM revert reason was encountered.",
          "likely_causes": [
            {
              "cause": "The transaction exhausted all the gas allocated for execution.",
              "fixes": [
                "Increase the gas limit and verify that the contract logic is optimized. Review gas usage."
              ],
              "report": "",
              "owner": null,
              "references": []
            },
            {
              "cause": "Reverting due unknown reason.",
              "fixes": [
                "Verify the contract call and its parameters are proper."
              ],
              "report": "",
              "owner": null,
              "references": []
            }
          ]
        },
        "bindings": {
          "rust": {
            "name": "Unknown",
            "path": ""
          },
          "typescript": {
            "name": "Unknown",
            "path": ""
          }
        },
        "origins": [
          "../../etc/errors/anvil.json"
        ]
      },
      "[compiler-llvm+era-0]": {
        "domain": "Compiler",
        "component": "LLVM_Era",
        "name": "GenericError",
        "code": 0,
        "identifier": "[compiler-llvm+era-0]",
        "message": "Generic error: {message}",
        "fields": [
          {
            "name": "message",
            "type": "string"
          }
        ],
        "documentation": null,
        "bindings": {
          "rust": {
            "name": "GenericError",
            "path": ""
          },
          "typescript": {
            "name": "GenericError",
            "path": ""
          }
        },
        "origins": []
      },
      "[compiler-llvm+evm-0]": {
        "domain": "Compiler",
        "component": "LLVM_EVM",
        "name": "GenericError",
        "code": 0,
        "identifier": "[compiler-llvm+evm-0]",
        "message": "Generic error: {message}",
        "fields": [
          {
            "name": "message",
            "type": "string"
          }
        ],
        "documentation": null,
        "bindings": {
          "rust": {
            "name": "GenericError",
            "path": ""
          },
          "typescript": {
            "name": "GenericError",
            "path": ""
          }
        },
        "origins": []
      },
      "[compiler-solc+fork-0]": {
        "domain": "Compiler",
        "component": "SolcFork",
        "name": "GenericError",
        "code": 0,
        "identifier": "[compiler-solc+fork-0]",
        "message": "Generic error: {message}",
        "fields": [
          {
            "name": "message",
            "type": "string"
          }
        ],
        "documentation": null,
        "bindings": {
          "rust": {
            "name": "GenericError",
            "path": ""
          },
          "typescript": {
            "name": "GenericError",
            "path": ""
          }
        },
        "origins": []
      },
      "[compiler-solc-0]": {
        "domain": "Compiler",
        "component": "Solc",
        "name": "GenericError",
        "code": 0,
        "identifier": "[compiler-solc-0]",
        "message": "Generic error: {message}",
        "fields": [
          {
            "name": "message",
            "type": "string"
          }
        ],
        "documentation": null,
        "bindings": {
          "rust": {
            "name": "GenericError",
            "path": ""
          },
          "typescript": {
            "name": "GenericError",
            "path": ""
          }
        },
        "origins": []
      },
      "[compiler-zksolc-0]": {
        "domain": "Compiler",
        "component": "Zksolc",
        "name": "GenericError",
        "code": 0,
        "identifier": "[compiler-zksolc-0]",
        "message": "Generic error: {message}",
        "fields": [
          {
            "name": "message",
            "type": "string"
          }
        ],
        "documentation": null,
        "bindings": {
          "rust": {
            "name": "GenericError",
            "path": ""
          },
          "typescript": {
            "name": "GenericError",
            "path": ""
          }
        },
        "origins": []
      },
      "[compiler-zkvyper-0]": {
        "domain": "Compiler",
        "component": "Zkvyper",
        "name": "GenericError",
        "code": 0,
        "identifier": "[compiler-zkvyper-0]",
        "message": "Generic error: {message}",
        "fields": [
          {
            "name": "message",
            "type": "string"
          }
        ],
        "documentation": null,
        "bindings": {
          "rust": {
            "name": "GenericError",
            "path": ""
          },
          "typescript": {
            "name": "GenericError",
            "path": ""
          }
        },
        "origins": []
      },
      "[core-api-0]": {
        "domain": "Core",
        "component": "API",
        "name": "GenericError",
        "code": 0,
        "identifier": "[core-api-0]",
        "message": "Generic error: {message}",
        "fields": [
          {
            "name": "message",
            "type": "string"
          }
        ],
        "documentation": null,
        "bindings": {
          "rust": {
            "name": "GenericError",
            "path": ""
          },
          "typescript": {
            "name": "GenericError",
            "path": ""
          }
        },
        "origins": []
      },
      "[core-eravm-0]": {
        "domain": "Core",
        "component": "EraVM",
        "name": "GenericError",
        "code": 0,
        "identifier": "[core-eravm-0]",
        "message": "Generic error: {message}",
        "fields": [
          {
            "name": "message",
            "type": "string"
          }
        ],
        "documentation": null,
        "bindings": {
          "rust": {
            "name": "GenericError",
            "path": ""
          },
          "typescript": {
            "name": "GenericError",
            "path": ""
          }
        },
        "origins": []
      },
      "[core-exec-0]": {
        "domain": "Core",
        "component": "ExecutionPlatform",
        "name": "GenericError",
        "code": 0,
        "identifier": "[core-exec-0]",
        "message": "Generic error: {message}",
        "fields": [
          {
            "name": "message",
            "type": "string"
          }
        ],
        "documentation": null,
        "bindings": {
          "rust": {
            "name": "GenericError",
            "path": ""
          },
          "typescript": {
            "name": "GenericError",
            "path": ""
          }
        },
        "origins": []
      },
      "[core-seq-0]": {
        "domain": "Core",
        "component": "Sequencer",
        "name": "GenericError",
        "code": 0,
        "identifier": "[core-seq-0]",
        "message": "Generic error: {message}",
        "fields": [
          {
            "name": "message",
            "type": "string"
          }
        ],
        "documentation": null,
        "bindings": {
          "rust": {
            "name": "GenericError",
            "path": ""
          },
          "typescript": {
            "name": "GenericError",
            "path": ""
          }
        },
        "origins": []
      },
      "[core-seq-1]": {
        "domain": "Core",
        "component": "Sequencer",
        "name": "GenericSequencerError",
        "code": 1,
        "identifier": "[core-seq-1]",
        "message": "Generic error: {message}",
        "fields": [
          {
            "name": "message",
            "type": "string"
          }
        ],
        "documentation": null,
        "bindings": {
          "rust": {
            "name": "GenericSequencerError",
            "path": ""
          },
          "typescript": {
            "name": "GenericSequencerError",
            "path": ""
          }
        },
        "origins": [
          "<default zksync-root.json>"
        ]
      },
      "[foundry-upstream-0]": {
        "domain": "Foundry",
        "component": "FoundryUpstream",
        "name": "GenericError",
        "code": 0,
        "identifier": "[foundry-upstream-0]",
        "message": "Generic error: {message}",
        "fields": [
          {
            "name": "message",
            "type": "string"
          }
        ],
        "documentation": null,
        "bindings": {
          "rust": {
            "name": "GenericError",
            "path": ""
          },
          "typescript": {
            "name": "GenericError",
            "path": ""
          }
        },
        "origins": []
      },
      "[foundry-zksync-0]": {
        "domain": "Foundry",
        "component": "FoundryZksync",
        "name": "GenericError",
        "code": 0,
        "identifier": "[foundry-zksync-0]",
        "message": "Generic error: {message}",
        "fields": [
          {
            "name": "message",
            "type": "string"
          }
        ],
        "documentation": null,
        "bindings": {
          "rust": {
            "name": "GenericError",
            "path": ""
          },
          "typescript": {
            "name": "GenericError",
            "path": ""
          }
        },
        "origins": []
      },
      "[hardhat-upstream-0]": {
        "domain": "Hardhat",
        "component": "HardhatUpstream",
        "name": "GenericError",
        "code": 0,
        "identifier": "[hardhat-upstream-0]",
        "message": "Generic error: {message}",
        "fields": [
          {
            "name": "message",
            "type": "string"
          }
        ],
        "documentation": null,
        "bindings": {
          "rust": {
            "name": "GenericError",
            "path": ""
          },
          "typescript": {
            "name": "GenericError",
            "path": ""
          }
        },
        "origins": []
      },
      "[hardhat-zksync-0]": {
        "domain": "Hardhat",
        "component": "HardhatZksync",
        "name": "GenericError",
        "code": 0,
        "identifier": "[hardhat-zksync-0]",
        "message": "Generic error: {message}",
        "fields": [
          {
            "name": "message",
            "type": "string"
          }
        ],
        "documentation": null,
        "bindings": {
          "rust": {
            "name": "GenericError",
            "path": ""
          },
          "typescript": {
            "name": "GenericError",
            "path": ""
          }
        },
        "origins": []
      }
    }
  }
}