{
  "types": [],
  "domains": [
    {
      "domain_name": "AnvilZKsync",
      "domain_code": 5,
      "identifier_encoding": "anvil_zksync",
      "bindings": {
        "rust": "AnvilZksync"
      },
      "components": [
        {
          "component_name": "AnvilGeneric",
          "component_code": 0,
          "identifier_encoding": "gen",
          "errors" : []
        },
        {
          "component_name": "AnvilEnvironment",
          "component_code": 1,
          "identifier_encoding": "env",
          "errors" : [
            {
              "name": "InvalidArguments",
              "code": 1,
              "message": "Invalid arguments: {details}.",
              "fields": [
                {
                  "name": "details",
                  "type": "string"
                },
                {
                  "name": "arguments",
                  "type": "string"
                }
              ],
              "doc": {
                "summary": "Invalid command line arguments provided.",
                "description": "There are missing or invalid command line arguments, or an invalid combination of arguments is provided.",
                "likely_causes": [
                  {
                    "cause": "Missing an essential argument or an incorrect value is provided.",
                    "fixes": [
                      "Check the short help on the CLI arguments using `anvil-zksync -h`"
                    ]
                  }
                ]
              }
            },
            {
              "name": "ServerStartupFailed",
              "code": 2,
              "message": "Failed to start server at {host_requested}:{port_requested}: {details}.",
              "fields": [
                {
                  "name": "host_requested",
                  "type": "string"
                },
                {
                  "name": "port_requested",
                  "type": "uint"
                },
                {
                  "name": "details",
                  "type": "string"
                }
              ],
              "doc": {
                "summary": "Failed to start the server and bind it to the requested host and port.",
                "description": [
                  "Anvil-zksync starts the server and listens to requests on a specified host and port, 0.0.0.0:8011 by default. They are configurable using `--host` and `--port` command line arguments.",
                  "",
                  "The host and port used by anvil-zksync are also displayed when you start anvil-zksync:",
                  "",
                  "```text",
                  "========================================",
                  "Listening on 0.0.0.0:8011",
                  "========================================",
                  "```",
                  "",
                  "This error indicates that listening on the specified host and port failed."
                ],
                "likely_causes": [
                  {
                    "cause": "You don't have permission to use specified host and port",
                    "fixes": [
                      "Check your firewall settings",
                      "Try with a different port"
                    ]
                  },
                  {
                    "cause": "The selected port is in use",
                    "fixes": [
                      "Check currently running applications that might use the port you want",
                      "Try with a different port"
                    ]
                  }
                ]
              }
            },
            {
              "name": "LogFileAccessFailed",
              "code": 10,
              "message": "Unable to access log file: {log_file_path}. Details: {wrapped_error}",
              "fields": [
                {
                  "name": "log_file_path",
                  "type": "string"
                },
                {
                  "name": "wrapped_error",
                  "type": "string"
                }
              ],
              "doc": {
                "summary": "Unable to access log file.",
                "description": [
                  "Anvil-zksync was unable to open log file for writing.",
                  "By default, the log file is searched for at `./anvil-zksync.log`.",
                  "You may provide this path explicitly through the CLI argument `--log-file-path`."
                ],
                "likely_causes": [
                  {
                    "cause": "Wrong path to log file.",
                    "fixes": [
                      "Check if you have provided a correct path through `--log-file-path` variable."
                    ]
                  },
                  {
                    "cause": "Not enough space in the storage.",
                    "fixes": [
                      "Free up some space in your storage",
                      "Use the CLI argument `--log-file-path` to point anvil-zksync to a log file path on a different storage with sufficient free space available."
                    ]
                  },
                  {
                    "cause": "Insufficient permissions.",
                    "fixes": [
                      "Check if you have permissions to write to the selected log file.",
                      "Use the CLI argument `--log-file-path` to point anvil-zksync to a log file path in a location where you have sufficient permissions to create and/or write to it"
                    ]
                  }
                ]
              }
            },
            {
              "name": "LogFileWriteFailed",
              "code": 11,
              "message": "Unable to append more lines to the log file `{log_filename}`: {wrapped_error}",
              "fields": [
                {
                  "name": "log_filename",
                  "type": "string"
                },
                {
                  "name": "wrapped_error",
                  "type": "string"
                }
              ],
              "doc": {
                "summary": "Unable to append to log file. Details: {wrapped_error}",
                "description": [
                  "Anvil-zksync was unable to write logs to the selected file.",
                  "By default, the log file is searched for at `./anvil-zksync.log`.",
                  "You may provide this path explicitly through the CLI argument `--log-file-path`."
                ],
                "likely_causes": [
                  {
                    "cause": "Wrong path to log file",
                    "fixes": [
                      "Check if you have provided a correct path through `--log-file-path` variable."
                    ]
                  },
                  {
                    "cause": "Not enough space in the storage.",
                    "fixes": [
                      "Free up some space in your storage",
                      "Use the CLI argument `--log-file-path` to point anvil-zksync to a log file path on a different storage with sufficient free space available."
                    ]
                  },
                  {
                    "cause": "Insufficient permissions.",
                    "fixes": [
                      "Check if you have permissions to write to the selected log file.",
                      "Use the CLI argument `--log-file-path` to point anvil-zksync to a log file path in a location where you have sufficient permissions to create and/or write to it"
                    ]
                  }
                ]
              }
            }
          ]
        },
        {
          "component_name": "Halt",
          "component_code": 2,
          "identifier_encoding": "halt",
          "errors": [
            {
              "name": "ValidationFailed",
              "code": 1,
              "message": "Account validation error: {msg}: {data}",
              "fields": [
                {
                  "name": "msg",
                  "type": "string"
                },
                {
                  "name": "data",
                  "type": "string"
                }
              ],
              "doc": {
                "summary": "Account validation failed during execution.",
                "description": "This error occurs when the account validation step fails during the verification and execution of a transaction.",
                "likely_causes": [
                  {
                    "cause": "Insufficient funds to cover transaction costs.",
                    "fixes": [
                      "Add enough balance to the account to pay for gas and the transaction amount."
                    ]
                  },
                  {
                    "cause": "Invalid account state or credentials.",
                    "fixes": [
                      "Verify that the account used has a valid signature and nonce."
                    ]
                  }
                ]
              }
            },
            {
              "name": "PaymasterValidationFailed",
              "code": 2,
              "message": "Paymaster validation error: {msg}: {data}.",
              "fields": [
                {
                  "name": "msg",
                  "type": "string"
                },
                {
                  "name": "data",
                  "type": "string"
                }
              ],
              "doc": {
                "summary": "Paymaster validation failed.",
                "description": "This error is emitted when the paymaster validation process fails during transaction execution.",
                "likely_causes": [
                  {
                    "cause": "Invalid paymaster parameters, insufficient funds or unmet validation conditions.",
                    "fixes": [
                      "Check the paymaster validation conditions and ensure all parameters are correct.",
                      "Ensure the paymaster account has sufficient funds to cover the transaction fees."
                    ]
                  }
                ]
              }
            },
            {
              "name": "PrePaymasterPreparationFailed",
              "code": 3,
              "message": "Pre-paymaster preparation error: {msg}: {data}",
              "fields": [
                {
                  "name": "msg",
                  "type": "string"
                },
                {
                  "name": "data",
                  "type": "string"
                }
              ],
              "doc": {
                "summary": "Pre-paymaster preparation step failed.",
                "description": "This error occurs during pre-transaction paymaster preparation if the paymaster input is too short (less than 4 bytes) or its selector is unsupported.",
                "likely_causes": [
                  {
                    "cause": "Invalid or improperly formatted paymaster input.",
                    "fixes": [
                      "Ensure that the paymaster input is at least 4 bytes long.",
                      "For approval-based flows, confirm that the paymaster input is at least 68 bytes long and correctly encodes the token address and minimum allowance.",
                      "Verify that the first 4 bytes of the paymaster input (the selector) match a supported paymaster flow (either approval-based or general)."
                    ]
                  }
                ]
              }
            },
            {
              "name": "PayForTxFailed",
              "code": 4,
              "message": "Failed to pay for the transaction: {msg}: {data}",
              "fields": [
                {
                  "name": "msg",
                  "type": "string"
                },
                {
                  "name": "data",
                  "type": "string"
                }
              ],
              "doc": {
                "summary": "Payment for the transaction failed.",
                "description": "This error is emitted when the system fails to deduct the required fees for executing the transaction.",
                "likely_causes": [
                  {
                    "cause": "Insufficient funds to cover the transaction fee.",
                    "fixes": [
                      "Ensure the account balance is sufficient to cover the fee (maxFeePerGas * gasLimit)."
                    ]
                  },
                  {
                    "cause": "Incorrect transaction fee configuration (maxFeePerGas or gasLimit).",
                    "fixes": [
                      "Verify that the maxFeePerGas and gasLimit values are correctly set to reflect the intended fee, and ensure they are within the limits of the account's balance."
                    ]
                  }
                ]
              }
            },
            {
              "name": "FailedToMarkFactoryDependencies",
              "code": 5,
              "message": "Failed to mark factory dependencies: {msg}: {data}",
              "fields": [
                {
                  "name": "msg",
                  "type": "string"
                },
                {
                  "name": "data",
                  "type": "string"
                }
              ],
              "doc": {
                "summary": "Failed to register factory dependencies for L1 transactions.",
                "description": "This error occurs when the system is unable to mark the factory dependencies for an L1 transaction in the known code storage. For L1 transactions, factory dependencies must be recorded as known to ensure that all required code components are available. A failure here may indicate that the dependency data is missing or malformed.",
                "likely_causes": [
                  {
                    "cause": "Missing or incorrectly formatted factory dependencies.",
                    "fixes": [
                      "Ensure that all required factory dependencies are provided and correctly formatted in the transaction."
                    ]
                  }
                ]
              }
            },
            {
              "name": "FailedToChargeFee",
              "code": 6,
              "message": "Failed to charge fee: {msg}: {data}",
              "fields": [
                {
                  "name": "msg",
                  "type": "string"
                },
                {
                  "name": "data",
                  "type": "string"
                }
              ],
              "doc": {
                "summary": "Transaction fee deduction failed.",
                "description": "This error is raised when the funds transferred to the bootloader are insufficient compared to the required fee (calculated as gasLimit * gasPrice). This may occur when the payer (account or paymaster) does not send enough ETH or when fee parameters are misconfigured.",
                "likely_causes": [
                  {
                    "cause": "Insufficient funds in the payer's account.",
                    "fixes": [
                      "Ensure that the account or paymaster has enough balance to cover the fee (gasLimit * gasPrice)."
                    ]
                  },
                  {
                    "cause": "Incorrect fee parameters (gasLimit or gasPrice).",
                    "fixes": [
                      "Verify that the gas limit and gas price values are correctly set and reflect the expected transaction costs."
                    ]
                  }
                ]
              }
            },
            {
              "name": "FromIsNotAnAccount",
              "code": 7,
              "message": "Sender is not an account",
              "doc": {
                "summary": "The sender address is not a valid account.",
                "description": "This error occurs when a transaction is attempted from an address that has not been deployed as an account, meaning the `from` address is just a contract.",
                "likely_causes": [
                  {
                    "cause": "Account not deployed with `createAccount` or `create2Account`",
                    "fixes": [
                      "Ensure that the `from` address is an account deployed using `createAccount` or `create2Account`."
                    ]
                  }
                ]
              }
            },
            {
              "name": "InnerTxError",
              "code": 8,
              "message": "Bootloader-based tx failed",
              "doc": {
                "summary": "An inner transaction error occurred.",
                "description": "Transaction reverted due to a contract call that failed during execution.",
                "likely_causes": [
                  {
                    "cause": "Contract function call failed.",
                    "fixes": [
                      "Review contract function logic for potential issues."
                    ]
                  }
                ]
              }
            },
            {
              "name": "Unknown",
              "code": 9,
              "message": "Unknown reason: {msg}: {data}",
              "fields": [
                {
                  "name": "msg",
                  "type": "string"
                },
                {
                  "name": "data",
                  "type": "string"
                }
              ],
              "doc": {
                "summary": "An unknown error occurred.",
                "description": "This error is emitted when the system encounters an unspecified reason for reverting and burning all gas.",
                "likely_causes": [
                  {
                    "cause": "Unexpected or unhandled VM state, or insufficient gas.",
                    "fixes": [
                      "Ensure the transaction parameters are correct and the gas limit is sufficient."
                    ]
                  }
                ]
              }
            },
            {
              "name": "UnexpectedVMBehavior",
              "code": 10,
              "message": "Virtual machine entered unexpected state. Error description: {problem}",
              "fields": [
                {
                  "name": "problem",
                  "type": "string"
                }
              ],
              "doc": {
                "summary": "The bootloader encountered an unexpected state.",
                "description": "This error can be triggered by various bootloader anomalies such as mismatched fee parameters (e.g., baseFee greater than maxFeePerGas), unaccepted pubdata price, failed system calls (like L1 messenger or System Context), or internal assertion failures.",
                "likely_causes": [
                  {
                    "cause": "Fee misconfiguration, failing L1 messenger/system calls, or assertion errors leading to a situation the VM could not handle.",
                    "fixes": [
                      "Check transaction logs and debug output to pinpoint the exact failing operation.",
                      "Verify fee settings (including baseFee and maxFeePerGas), pubdata price, and any external calls to L1 messenger or system context.",
                      "If unresolved, contact the development team with detailed logs and transaction data."
                    ]
                  }
                ]
              }
            },
            {
              "name": "BootloaderOutOfGas",
              "code": 11,
              "message": "Bootloader out of gas",
              "doc": {
                "summary": "The bootloader has run out of gas.",
                "description": "This error occurs when the bootloader does not have enough gas to continue executing the transaction.",
                "likely_causes": [
                  {
                    "cause": "Insufficient gas limit set for the transaction.",
                    "fixes": [
                      "Increase the gas limit for the transaction.",
                      "Optimize the transaction to consume less gas."
                    ]
                  }
                ]
              }
            },
            {
              "name": "ValidationOutOfGas",
              "code": 12,
              "message": "Validation run out of gas",
              "doc": {
                "summary": "The validation step ran out of gas.",
                "description": "Validation step of transaction execution exceeds the allocated gas limit.",
                "likely_causes": [
                  {
                    "cause": "Insufficient gas limit set for the transaction.",
                    "fixes": [
                      "Increase the gas limit for the transaction.",
                      "Optimize the transaction to consume less gas."
                    ]
                  }
                ]
              }
            },
            {
              "name": "TooBigGasLimit",
              "code": 13,
              "message": "Transaction has a too big ergs limit and will not be executed by the server",
              "doc": {
                "summary": "The transaction's gas limit is excessively high.",
                "description": "This error occurs when the gas limit set for the transaction is too large for the server to handle.",
                "likely_causes": [
                  {
                    "cause": "Setting an unrealistically high gas limit for the transaction.",
                    "fixes": [
                      "Adjust the gas limit to a reasonable value."
                    ]
                  }
                ]
              }
            },
            {
              "name": "NotEnoughGasProvided",
              "code": 14,
              "message": "Bootloader does not have enough gas to proceed with the transaction.",
              "doc": {
                "summary": "Insufficient gas for the bootloader to continue the transaction.",
                "description": "The bootloader checks if it can supply the requested gas plus overhead. If the remaining gas is below this threshold, it reverts.",
                "likely_causes": [
                  {
                    "cause": "User-specified gas limit is lower than the combined operational and overhead needs.",
                    "fixes": [
                      "Increase the gas limit to cover both the transaction and overhead costs.",
                      "Use gas estimation methods to avoid under-provisioning."
                    ]
                  }
                ]
              }
            },
            {
              "name": "MissingInvocationLimitReached",
              "code": 15,
              "message": "Transaction produced too much storage accesses.",
              "doc": {
                "summary": "The transaction exceeded the allowed number of storage invocations.",
                "description": "This error occurs when the transaction makes too many missing invocations to memory, surpassing the allowed limit.",
                "likely_causes": [
                  {
                    "cause": "Highly complex transaction with excessive memory accesses.",
                    "fixes": [
                      "Optimize the transaction to reduce the number of memory accesses."
                    ]
                  }
                ]
              }
            },
            {
              "name": "FailedToSetL2Block",
              "code": 16,
              "message": "Failed to set information about the L2 block: {msg}",
              "fields": [
                {
                  "name": "msg",
                  "type": "string"
                }
              ],
              "doc": {
                "summary": "Unable to set L2 block information.",
                "description": "System failed to set the necessary information for the L2 block during execution.",
                "likely_causes": [
                  {
                    "cause": "Invalid L2 block data or internal processing error.",
                    "fixes": [
                      "Verify the L2 block information being set.",
                      "Check for any internal processing issues that might prevent setting the L2 block."
                    ]
                  }
                ]
              }
            },
            {
              "name": "FailedToAppendTransactionToL2Block",
              "code": 17,
              "message": "Failed to append the transaction to the current L2 block: {msg}",
              "fields": [
                {
                  "name": "msg",
                  "type": "string"
                }
              ],
              "doc": {
                "summary": "Unable to append the transaction hash to the ongoing L2 block.",
                "description": "The system context call to record this transaction in the current L2 block failed.",
                "likely_causes": [
                  {
                    "cause": "System context call failure or an invalid L2 block state (e.g., corrupted data, insufficient resources, unforeseen internal errors in the system context).",
                    "fixes": [
                      "Verify the system context call logs and ensure there is enough gas.",
                      "Check for any data inconsistencies or corrupt block information."
                    ]
                  }
                ]
              }
            },
            {
              "name": "VMPanic",
              "code": 18,
              "message": "VM panicked",
              "doc": {
                "summary": "The virtual machine encountered a panic.",
                "description": "VM experiences a critical failure and panic during transaction execution.",
                "likely_causes": [
                  {
                    "cause": "Uncaught exception or critical internal error within the VM.",
                    "fixes": [
                      "Review the transaction for any operations that might cause the VM to panic."
                    ]
                  }
                ]
              }
            },
            {
              "name": "TracerCustom",
              "code": 19,
              "message": "Tracer aborted execution: {msg}",
              "fields": [
                {
                  "name": "msg",
                  "type": "string"
                }
              ],
              "doc": {
                "summary": "Tracer aborted the transaction execution.",
                "description": "Custom tracer used during transaction execution decides to abort the process, typically due to specific conditions being met.",
                "likely_causes": [
                  {
                    "cause": "Custom tracer conditions not met or detected an issue.",
                    "fixes": [
                      "Review the tracer's logic to understand why it aborted the execution."
                    ]
                  }
                ]
              }
            },
            {
              "name": "FailedToPublishCompressedBytecodes",
              "code": 20,
              "message": "Failed to publish compressed bytecodes",
              "doc": {
                "summary": "Unable to publish compressed bytecodes.",
                "description": "Emitted when the system fails to publish the compressed bytecodes during execution.",
                "likely_causes": [
                  {
                    "cause": "Compression failure or network issues during publishing.",
                    "fixes": [
                      "Ensure the compression is functioning correctly."
                    ]
                  }
                ]
              }
            },
            {
              "name": "FailedBlockTimestampAssertion",
              "code": 21,
              "message": "Transaction failed `block.timestamp` assertion",
              "doc": {
                "summary": "Block timestamp assertion failed during the transaction.",
                "description": "This error often occurs if the transaction's timestamp is behind the last known block or conflicts with expected chronological order.",
                "likely_causes": [
                  {
                    "cause": "Transaction timestamp is out of sync with the previously produced block's timestamp (possible backward time travel).",
                    "fixes": [
                      "Ensure the block timestamp is set to the correct or forward time.",
                      "If using time manipulation APIs, shift the block time so it is strictly after the most recent block."
                    ]
                  }
                ]
              }
            }
          ]
        },
        {
          "component_name": "Revert",
          "component_code": 3,
          "identifier_encoding": "revert",
          "errors": [
            {
              "name": "General",
              "code": 1,
              "message": "Execution reverted with message: {msg}",
              "fields": [
                {
                  "name": "msg",
                  "type": "string"
                },
                {
                  "name": "data",
                  "type": "bytes"
                }
              ],
              "doc": {
                "summary": "Execution reverted due to a failure.",
                "description": "This error indicates that the transaction execution was reverted.",
                "likely_causes": [
                  {
                    "cause": "The smart contract encountered a condition that triggered a revert.",
                    "fixes": [
                      "Check the transaction parameters, such as sender address, function inputs, and required permissions.",
                      "Ensure that the contract state allows the operation (e.g., the caller has the required role or balance).",
                      "For further debugging, check the transaction logs and VM trace."
                    ]
                  }
                ]
              }
            },
            {
              "name": "InnerTxError",
              "code": 2,
              "message": "Bootloader-based transaction failed.",
              "doc": {
                "summary": "An inner transaction error occurred.",
                "description": "This error is emitted when an inner transaction within the VM fails, typically related to bootloader execution.",
                "likely_causes": [
                  {
                    "cause": "Failure in executing a nested transaction within the VM.",
                    "fixes": [
                      "Check the inner transaction details for errors.",
                      "Ensure that all prerequisites for the nested transaction are met."
                    ]
                  }
                ]
              }
            },
            {
              "name": "VmError",
              "code": 3,
              "message": "VM Error",
              "doc": {
                "summary": "A generic VM error.",
                "description": "This error indicates a generic failure within the VM, without specific details.",
                "likely_causes": [
                  {
                    "cause": "A non-specific internal error within the VM.",
                    "fixes": [
                      "Review the VM logs for more detailed information."
                    ]
                  }
                ]
              }
            },
            {
              "name": "Unknown",
              "code": 4,
              "message": "Unknown VM revert reason: function_selector={function_selector}, data={data}",
              "fields": [
                {
                  "name": "function_selector",
                  "type": "string"
                },
                {
                  "name": "data",
                  "type": "string"
                }
              ],
              "doc": {
                "summary": "An unknown VM revert reason was encountered.",
                "description": [
                  "This error is emitted when the VM encounters a revert reason that is not recognized.",
                  "In most cases, this error may also indicate that the transaction exhausted all the gas allocated for its execution."
                ],
                "likely_causes": [
                  {
                    "cause": "The transaction exhausted all the gas allocated for execution.",
                    "fixes": [
                      "Increase the gas limit and verify that the contract logic is optimized. Review gas usage."
                    ]
                  },
                  {
                    "cause": "Reverting due unknown reason.",
                    "fixes": [
                      "Verify the contract call and its parameters are proper."                      
                    ]
                  }
                ]
              }
            }
          ]
        },
        {
          "component_name": "TransactionValidation",
          "component_code": 4,
          "identifier_encoding": "tx_invalid",
          "errors" : [
            {
              "name": "InvalidGasLimit",
              "code": 1,
              "message": "Gas limit for transaction is {tx_gas_limit} which exceeds maximum allowed gas {max_gas}",
              "fields": [
                {
                  "name": "tx_gas_limit",
                  "type": "U256"
                },
                {
                  "name": "max_gas",
                  "type": "U256"
                }
              ],
              "doc": {
                "summary": "Transaction validation failed due to excessive gas limit -- did you provide invalid gas limit?",
                "description": [
                  "This error occurs when a transaction's gas limit exceeds the maximum allowed gas allowed by ZKsync protocol.",
                  "As of protocol version 27, the gas is limited to 2^50",
                  "Note: When anvil-zksync is in forking mode, it lock-in and uses gas price at the forked block"
                ],
                "likely_causes": [
                  {
                    "cause": "The transaction's gas limit is set too high relative to the maximum gas limit.",
                    "fixes": [
                      "It is likely a typo in the code that builds the transaction -- check if the provided gas limit is correct.",
                      "Reduce the transaction's gas limit to be below the maximum allowed gas."
                    ]
                  }
                ]
              }
            },
            {
              "name": "GasPerPubdataLimit",
              "code": 2,
              "message": "Gas per pubdata limit is {tx_gas_per_pubdata_limit} which exceeds maximum allowed gas {max_gas}",
              "fields": [
                {
                  "name": "tx_gas_per_pubdata_limit",
                  "type": "U256"
                },
                {
                  "name": "max_gas",
                  "type": "U256"
                }
              ],
              "doc": {
                "summary": "Transaction validation failed due to excessive gas per pubdata limit.",
                "description": [
                  "This error occurs when a transaction's gas per pubdata limit exceeds the maximum allowed gas allowed by ZKsync protocol.",
                  "As of protocol version 27, the gas is limited to 2^50",
                  "Note: When anvil-zksync is in forking mode, it lock-in and uses gas price at the forked block"
                ],
                "likely_causes": [
                  {
                    "cause": "The transaction's gas per pubdata limit is set too high.",
                    "fixes": [
                      "It is likely a typo in the code that builds the transaction -- check if the provided gas limit is correct.",
                      "Reduce the gas per pubdata limit."
                    ]
                  }
                ]
              }
            },
            {
              "name": "MaxFeePerGasTooLow",
              "code": 3,
              "message": "Max fee per gas: {max_fee_per_gas}, current L2 gas price {l2_gas_price} is too expensive.",
              "fields": [
                {
                  "name": "max_fee_per_gas",
                  "type": "U256"
                },
                {
                  "name": "l2_gas_price",
                  "type": "U256"
                }
              ],
              "doc": {
                "summary": "Transaction's maxFeePerGas is lower than the current gas price in anvil-zksync.",
                "description": [
                  "This error occurs when the maximum fee per gas specified in the transaction is lower than the current gas price set in the anvil-zksync node.",
                  "To be considered valid, transactions must specify a maxFeePerGas that is greater or equal to the current gas price",
                  "",
                  "In anvil-zksync, the gas price can be configured when starting the node using `--l1-gas-price` argument or can be modified dynamically. By default, the node simulates a gas price model similar to the real ZKSync network, including:",
                  "1. A base computation fee (similar to Ethereum's base fee)",
                  "2. A simulated pubdata posting fee",
                  "",
                  "Even though anvil-zksync is a testing environment, it enforces these gas price validations to ensure that your tests accurately reflect how transactions would behave on the actual ZKSync network.",
                  "Note: When anvil-zksync is in forking mode, it lock-in and uses gas price at the forked block"
                ],
                "likely_causes": [
                  {
                    "cause": "The transaction's maxFeePerGas is set too low compared to the current gas price in the anvil-zksync node.",
                    "fixes": [
                      "Increase the maxFeePerGas to be at least equal to the current gas price.",
                      "Use the eth_gasPrice RPC method to query the current gas price from your anvil-zksync node.",
                      "In testing environments, you can also configure anvil-zksync to use a lower gas price if needed."
                    ]
                  },
                  {
                    "cause": "Gas price has changed in the anvil-zksync node since the transaction was created.",
                    "fixes": [
                      "If you've manually adjusted the gas price in anvil-zksync during testing, ensure your transactions use updated values.",
                      "Query the current gas price before each transaction submission in your tests.",
                      "For testing series of transactions with consistent gas prices, consider setting a fixed gas price when starting anvil-zksync.",
                      "Manipulating gas price can break invariants important for Ethereum tooling, for example, two consequent blocks should not have gas price differ more than 2x."
                    ]
                  },
                  {
                    "cause": "Using hardcoded gas prices in test scripts instead of querying the actual price.",
                    "fixes": [
                      "Always query the current gas price from anvil-zksync before creating transactions.",
                      "Add a small buffer to the queried gas price to account for potential minor fluctuations.",
                      "When writing tests, consider making the gas price configuration explicit to avoid inconsistent test behavior."
                    ]
                  }
                ]
              }
            },
            {
              "name": "MaxPriorityFeeGreaterThanMaxFee",
              "code": 4,
              "message": "maxPriorityFeePerGas={max_priority_fee_per_gas} exceeds the limit value maxFeePerGas={max_fee_per_gas}",
              "fields": [
                {
                  "name": "max_fee_per_gas",
                  "type": "U256"
                },
                {
                  "name": "max_priority_fee_per_gas",
                  "type": "U256"
                }
              ],
              "doc": {
                "summary": "Transaction's maxPriorityFeePerGas exceeds maxFeePerGas.",
                "description": [
                  "This error occurs when a transaction's maximum priority fee per gas is greater than its maximum fee per gas in anvil-zksync.",
                  "In ZKSync, the field `maxPriorityFeePerGas` is ignored, as ZKsync doesn’t have a concept of priority fees.",
                  "Instead, `maxFeePerGas` is utilized and includes the base fees.",
                  "However, certain transaction types like EIP-1559 or EIP-712 may contain field `maxPriorityFeePerGas`, which should be less or equal to the field `maxFeePerGas`. "
                ],
                "likely_causes": [
                  {
                    "cause": "Incorrect transaction parameter values in your test where `maxPriorityFeePerGas` > `maxFeePerGas`.",
                    "fixes": [
                      "Ensure maxPriorityFeePerGas is less than or equal to maxFeePerGas in your test transactions. Either increase maxFeePerGas or decrease maxPriorityFeePerGas to ensure correct relationship."
                    ]
                  },
                  {
                    "cause": "Test automation that generates random or incorrect fee values.",
                    "fixes": [
                      "Ensure your test framework validates transaction parameters before submission.",
                      "Use helper functions that properly calculate and relate the fee values.",
                      "If using fuzz testing, add constraints to ensure maxPriorityFeePerGas <= maxFeePerGas."
                    ]
                  },
                  {
                    "cause": "When migrating tests from non-EIP-1559 environments to anvil-zksync.",
                    "fixes": [
                      "Update legacy tests that might be using pre-EIP-1559 fee models.",
                      "Ensure all transaction creation code properly handles EIP-1559 style fee parameters.",
                      "Add validation checks in your test setup to catch this type of error early."
                    ]
                  }
                ]
              }
            }
          ]
        },
        {
          "component_name": "GasEstimation",
          "component_code": 5,
          "identifier_encoding": "gas_estim",
          "errors" : [
            {
              "name": "ExceedsLimitForPublishedPubdata",
              "code": 1,
              "message": "Transaction has published {pubdata_published} bytes which exceeds limit for published pubdata ({pubdata_limit}).",
              "fields": [
                {
                  "name":"pubdata_published",
                  "type":"uint"
                },
                {
                  "name":"pubdata_limit",
                  "type":"uint"
                }
              ],
              "doc" : {
                "summary": "Transaction exceeds the limit for published pubdata.",
                "description": "This error occurs when a transaction attempts to publish more pubdata than is allowed in a batch. Each transaction has a limit on how much pubdata it can publish to maintain network efficiency and prevent abuse.",
                "likely_causes": [
                  {
                    "cause": "The transaction requires too much gas to be executed. For example, it may contain an infinite loop.",
                    "fixes": [
                      "Debug the transaction to see why it consumes more gas than is allowed."
                    ]
                  },
                  {
                    "cause": "The transaction is malformed.",
                    "fixes": [
                      "Check the nonce value provided in the RPC call that you are using (such as `eth_estimateGas`). If you do not care about the specific nonce for the transaction, do not provide any value for it.",
                      "Check all arguments of the RPC call (such as `eth_estimateGas`). Are the `from`, `to` addresses correct?"
                    ]
                  }
                ]
              }
            },
            {
              "name": "ExceedsBlockGasLimit",
              "code": 2,
              "message": "Estimating full gas limit overflows while adding up additional gas ({gas_for_pubdata}), overhead ({overhead}), and estimated transaction body gas cost ({estimated_body_cost}).",
              "fields": [
                {
                  "name":"overhead",
                  "type":"u64"
                },
                {
                  "name":"gas_for_pubdata",
                  "type":"u64"
                },
                {
                  "name":"estimated_body_cost",
                  "type":"u64"
                }
              ],
              "doc": {
                "summary": "Transaction gas estimation exceeds the block gas limit.",
                "description": [
                  "This error occurs when the total gas required for a transaction exceeds the maximum allowed for a block.",
                  "The total gas is calculated by summing three components: the gas needed for publishing pubdata, the fixed overhead costs,",
                  "and the estimated gas for the transaction body itself. When this sum overflows or exceeds the block limit, this error is thrown."
                ],
                "likely_causes": [
                  {
                    "cause": "The transaction requires too much gas to be executed. For example, it may contain an infinite loop.",
                    "fixes": [
                      "Debug the transaction to see why it consumes more gas than is allowed."
                    ]
                  },
                  {
                    "cause": "The transaction is malformed.",
                    "fixes": [
                      "Check the nonce value provided in the RPC call that you are using (such as `eth_estimateGas`). If you do not care about the specific nonce for the transaction, do not provide any value for it.",
                      "Check all arguments of the RPC call (such as `eth_estimateGas`). Are the `from`, `to` addresses correct?"
                    ]
                  }
                ]
              }
            },
            {
              "name": "TransactionHalt",
              "code": 10,
              "message": "Gas estimation failed because the transaction exhibits exotic gas behavior and reverts, burning all gas: {inner}",
              "fields": [
                {
                  "name": "inner",
                  "type": "Halt"
                }
              ],
              "doc": {
                "summary": "Transaction execution reverts and burns all gas while estimating required gas in anvil-zksync.",
                "description": [
                 "This error occurs when anvil-zksync is trying to estimate gas required to run this transaction ",
                  "but the estimation fails because the transaction reverts and burns all gas.",
                  "",
                  "Before estimating gas, anvil-zksync first runs the transaction with maximum gas possible.",
                  "If the first run was successful, anvil-zksync proceeds with the estimation",
                  "The estimation algorithm looks for a minimum gas value that makes the transaction succeed.",
                  "This works if the transaction fails for all lower gas values and succeeds for all higher gas values.",
                  "Some valid, but exotic transactions, resist estimation.",
                  "Typically they depend on specific gas values, for example, they fail if `gasleft()` returned a value in a specific range."
                ],
                "likely_causes": [
                  {
                    "cause": "The transaction always reverts and burns all gas, so it can't be estimated.",
                    "fixes": [
                      "Inspect the source code of your contracts and debug the transaction to eliminate the cause of failure."
                    ]
                  }
                ]

              }
            },
            {
              "name": "TransactionRevert",
              "code": 11,
              "message": "Gas estimation failed because the transaction exhibits exotic gas behavior and reverts, returning unspent gas: {inner}",
              "fields": [
                {
                  "name": "inner",
                  "type": "Revert"
                },
                {
                  "name": "data",
                  "type": "bytes"
                }
              ],
              "doc": {
                "summary": "Transaction execution reverted while estimating required gas in anvil-zksync.",
                "description": [
                  "This error occurs when anvil-zksync is trying to estimate gas required to run this transaction ",
                  "but the estimation fails because the transaction is reverted.",
                  "",
                  "Before estimating gas, anvil-zksync first runs the transaction with maximum gas possible.",
                  "If the first run was successful, anvil-zksync proceeds with the estimation",
                  "The estimation algorithm looks for a minimum gas value that makes the transaction succeed.",
                  "This works if the transaction fails for all lower gas values and succeeds for all higher gas values.",
                  "Some valid, but exotic transactions, resist estimation.",
                  "Typically they depend on specific gas values, for example, they revert if `gasleft()` returned a value in a specific range."
                ],
                "likely_causes": [
                  {
                    "cause": "The transaction always reverts.",
                    "fixes": [
                      "Inspect the source code of your contracts and debug the transaction to eliminate the cause of revert."
                    ]
                  }
                ]
              }
            },
            {
              "name": "TransactionAlwaysHalts",
              "code": 20,
              "message": "Gas estimation is impossible because the transaction can not be executed with maximum gas, it reverts and returns unspent gas:\n{inner}",
              "fields": [
                {
                  "name": "inner",
                  "type": "Halt"
                }
              ],
              "doc": {
                "summary": "An attempt to run the transaction with maximum gas resulted in reverting the transaction and burning all gas.",
                "description": [
                  "Before estimating gas, anvil-zksync first runs the transaction with maximum gas possible.",
                  "This error occurs when this initial run results in a revert and burns all gas, suggesting that ",
                  "no amount of gas will make this transaction executable.",
                  "",
                  "There might be valid, but exotic transactions that fail when run with maximum gas provided,",
                  "but these are rare. Typically they depend on specific gas values.",
                  "Usually, this error indicates either an unconditional revert or excessive gas consumption."
                ]
                ,
                "likely_causes": [
                  {
                    "cause": "The transaction always reverts and burns gas.",
                    "fixes": [
                      "Inspect the source code of your contracts and debug the transaction to eliminate the cause of failure."
                    ]
                  },
                  {
                    "cause": "The transaction is malformed.",
                    "fixes": [
                      "Check the transaction for nonce mismatches, signature issues, and possibly paymaster-related errors.",
                      "If transaction is expected to revert (e.g., for testing purposes), avoid estimating gas for it and provide gas limit manually.",
                      "Do not provide explicit nonce in your RPC request if you don't need it -- otherwise you risk triggering nonce mismatch."
                    ]
                  }
                ]

              }
            },
            {
              "name": "TransactionAlwaysReverts",
              "code": 21,
              "message": "Gas estimation is impossible because the transaction can not be executed with maximum gas, it reverts and burns all gas:\n{inner}",
              "fields": [
                {
                  "name": "inner",
                  "type": "Revert"
                },
                {
                  "name": "data",
                  "type": "bytes"
                }
              ],
              "doc": {
                "summary": "An attempt to run the transaction with maximum gas resulted in reverting the transaction and returning unspent gas.",
                "description": [
                  "Before estimating gas, anvil-zksync first runs the transaction with maximum gas possible.",
                  "This error occurs when this initial run results in a revert and returns unspent gas, suggesting that ",
                  "no amount of gas will make this transaction executable.",
                  "",
                  "There might be valid, but exotic transactions that fail when run with maximum gas provided,",
                  "but these are rare. Typically they depend on specific gas values.",
                  "Usually, this error indicates either an unconditional revert or excessive gas consumption."
                ],
                "likely_causes": [
                  {
                    "cause": "The transaction always reverts, so it can't be estimated.",
                    "fixes": [
                      "Inspect the source code of your contracts and debug the transaction to eliminate the cause of revert.",
                      "If transaction is expected to revert (e.g., for testing purposes), avoid estimating gas for it and provide gas limit manually."
                    ]
                  }
                ]
              }
            }
          ]
        },
        {
          "component_name": "AnvilNode",
          "component_code": 10,
          "identifier_encoding": "node",
          "errors" : [
            {
              "name": "TransactionHalt",
              "code": 1,
              "message": "Transaction {transaction_hash} execution reverted and gas was burned:\n{inner}",
              "fields": [
                {
                  "name": "inner",
                  "type": "Halt"
                },
                {
                  "name": "transaction_hash",
                  "type": "H256"
                }
              ],
              "doc": {
                "summary": "Transaction execution reverted and gas was burned.",
                "description": [
                  "This error occurs when a transaction execution is reverted due to an error in the anvil-zksync virtual machine execution and all gas is burned.",
                  "This is a wrapper error that contains a more specific error inside it.",
                  "",
                  "The VM may fail for various reasons including:",
                  "- Account validation failures (signature issues, nonce mismatches)",
                  "- Paymaster-related errors (when testing account abstraction features)",
                  "- Gas limit exceedance",
                  "- Storage access limitations",
                  "- Contract execution failures",
                  "",
                  "When using anvil-zksync for testing, these failures are valuable signals that help you identify issues with your contracts or transactions before deploying to the real ZKSync network."
                ],
                "likely_causes": [
                  {
                    "cause": "Transaction execution in your test encountered a condition that forced it to fail prematurely.",
                    "fixes": [
                      "Fix the underlying issue based on the specific reason provided in the inner error.",
                      "Use anvil-zksync's debugging capabilities to trace the execution and identify the exact point of failure.",
                      "For account-related failures, check account balance, nonce, and signature in your test setup."
                    ]
                  },
                  {
                    "cause": "Test transaction interacts with ZKSync-specific components like paymasters or account abstraction features incorrectly.",
                    "fixes": [
                      "If testing account abstraction features, ensure your test paymaster implementation follows proper specifications.",
                      "Review the test transaction's paymaster parameters and allowances if applicable.",
                      "Check factory dependencies for contract deployments in your test environment.",
                      "Use anvil-zksync's tracing capabilities to debug complex transactions."
                    ]
                  },
                  {
                    "cause": "Test involves operations that behave differently in ZKSync compared to standard Ethereum.",
                    "fixes": [
                      "Review ZKSync documentation for operation-specific limitations compared to Ethereum.",
                      "Adapt your tests to account for ZKSync-specific behavior.",
                      "Use anvil-zksync's configuration options to match the specific ZKSync environment you're targeting.",
                      "Consider writing separate test cases for Ethereum and ZKSync-specific behaviors."
                    ]
                  },
                  {
                    "cause": "Test environment setup issue in anvil-zksync.",
                    "fixes": [
                      "Verify that your anvil-zksync instance is properly configured for your test case.",
                      "Check if you need to deploy or fund specific accounts before running your test transactions.",
                      "Ensure system contracts are properly initialized in your test environment if you're testing complex ZKSync features.",
                      "Consider resetting the anvil-zksync instance between test runs for a clean state."
                    ]
                  }
                ]
              }
            },
            {
              "name": "TransactionValidationFailed",
              "code": 10,
              "message": "Transaction {transaction_hash}: validation failed:\n{inner}",
              "fields": [
                {
                  "name": "inner",
                  "type": "TransactionValidation"
                },
                {
                  "name": "transaction_hash",
                  "type": "H256"
                }
              ],
              "doc": {
                "summary": "Transaction validation failed in anvil-zksync.",
                "description": [
                  "This error occurs when a transaction validation is failed and it is not executed.",
                  "This is a wrapper error that contains a more specific validation error inside it, which provides details about the cause of failure.",
                  "",
                  "The validation may fail for various reasons including:",
                  "- Gas limit exceedance",
                  "- Invalid gas limit value",
                  "- maxFeePerGas exceeding maxPriorityFeePerGas, and so on.",
                  "",
                  "When using anvil-zksync for testing, these errors are valuable signals that help you identify issues with your contracts or transactions before deploying to the real ZKSync network."
                ]
              }
            },
            {
              "name": "TransactionGasEstimationFailed",
              "code": 11,
              "message": "Gas estimation failed:\n{inner}",
              "fields": [
                {
                  "name": "inner",
                  "type": "GasEstimation"
                },
                {
                  "name": "transaction_data",
                  "type": "bytes"
                }
              ],
              "doc": {
                "summary": "Transaction gas estimation failed in anvil-zksync.",
                "description": [
                  "This error occurs when a gas estimation for transaction failed.",
                  "This is a wrapper error that contains a more specific gas estimation error inside it, which provides details about the cause of failure."
                ]
              }
            },
            {
              "name": "TimestampBackwardsError",
              "code": 20,
              "message": "Failed to force the next timestamp to value {timestamp_requested}. It should be greater than the last timestamp {timestamp_now}.",
              "fields": [
                {
                  "name": "timestamp_requested",
                  "type": "u64"
                },
                {
                  "name": "timestamp_now",
                  "type": "u64"
                }
              ],
              "doc": {
                "summary": "Requested block timestamp is earlier than the current timestamp.",
                "description": [
                  "This error occurs when attempting to set a future block timestamp to a value that is earlier than the timestamp of the most recently mined block.",
                  "",
                  "In anvil-zksync, block timestamps must always increase monotonically. This simulates the behavior of real blockchain networks where time only moves forward. Each new block must have a timestamp greater than its predecessor.",
                  "",
                  "Anvil-zksync provides methods to manipulate time for testing purposes (like `evm_increaseTime` and `evm_setNextBlockTimestamp`), but these can only move time forward, never backward.",
                  "",
                  "Block timestamps in anvil-zksync are used by:",
                  "- Smart contracts that rely on `block.timestamp` for time-dependent logic",
                  "- System contracts that need to track event timing",
                  "- Time-locked functionality in DeFi applications and governance protocols",
                  "",
                  "When testing contracts that have time-dependent logic, it's important to ensure that any manipulated timestamps move forward in time, not backward."
                ],
                "likely_causes": [
                  {
                    "cause": "Test code attempts to set a block timestamp that is earlier than the current timestamp.",
                    "fixes": [
                      "Ensure your test sets timestamps that are greater than the current block timestamp.",
                      "Query the current block timestamp first using eth_getBlockByNumber before determining a future timestamp value.",
                      "For testing time-sensitive contracts, plan your time manipulation sequence to always move forward."
                    ]
                  },
                  {
                    "cause": "Tests manipulating time incorrectly by trying to go back to an earlier point in time.",
                    "fixes": [
                      "If you need to test behavior at different timestamps, consider resetting the node state entirely between tests.",
                      "Use anvil-zksync's snapshot and revert features to create a clean state with the desired initial timestamp.",
                      "Design your tests to account for the forward-only movement of blockchain time."
                    ]
                  },
                  {
                    "cause": "Attempting to reset time to an earlier point after advancing it in a previous test.",
                    "fixes": [
                      "Restructure your tests to maintain timestamp progression within each test suite.",
                      "Create separate, isolated test cases for scenarios that require different timestamp starting points.",
                      "Use separate anvil-zksync instances for tests that require conflicting timestamp sequences."
                    ]
                  }
                ]
              }
            },
            {
              "name": "SerializationError",
              "code": 30,
              "message": "Failed to parse a {transaction_type} transaction from request (from={from}, to={to}): {reason}.",
              "fields": [
                {
                  "name": "transaction_type",
                  "type": "string"
                },
                {
                  "name": "from",
                  "type": "H256"
                },
                {
                  "name": "to",
                  "type": "H256"
                },
                {
                  "name": "reason",
                  "type": "string"
                }
              ],
              "doc": {
                "summary": "Failed to serialize transaction request into a valid transaction.",
                "description": [
                  "This error occurs when anvil-zksync is unable to convert a transaction request into a properly formatted transaction object.",
                  "This typically happens during transaction creation or gas estimation when the request contains invalid or incompatible parameters."
                ],
                "likely_causes": [
                  {
                    "cause": "Malformed transaction data in the request.",
                    "fixes": [
                      "Verify that all transaction parameters are properly formatted and have valid values.",
                      "Check that addresses are valid Ethereum addresses.",
                      "Ensure that numeric values are within their allowed ranges."
                    ]
                  },
                  {
                    "cause": "Missing required transaction fields.",
                    "fixes": [
                      "Make sure all required fields for the transaction type are included in the request."
                    ]
                  },
                  {
                    "cause": "Incompatible transaction parameters.",
                    "fixes": [
                      "Check that the combination of parameters is valid for the transaction type being used.",
                      "Verify that gas-related parameters are consistent with each other."
                    ]
                  }
                ]
              }
            }

          ]
        },
        {
          "component_name": "StateLoader",
          "component_code": 11,
          "identifier_encoding": "state",
          "errors" : [
            {
              "name": "LoadingStateOverExistingState",
              "code": 1,
              "message": "Loading state into a node with existing state is not allowed.",
              "doc" : {
                "summary": "It is not allowed to load a state overriding the existing node state.",
                "description": "It is not allowed to load a state overriding the existing node state. If you have a use case for that, please create an issue."
              }
            },
            {
              "name": "LoadEmptyState",
              "code": 2,
              "message": "Loading a state without blocks is not allowed.",
              "doc" : {
                "summary": "Attempt to load a state with no blocks",
                "description": "It is not allowed to load a state without any blocks in it.",
                "likely_causes": [
                  "Skip loading state or provide a non-empty state file."
                ]
              }
            },
            {
              "name": "StateDecompression",
              "code": 3,
              "message": "Failed to decompress state: {details}.",
              "fields": [
                {
                  "name": "details",
                  "type": "string"
                }
              ],
              "doc" : {
                "description": "Failed to decompress the state.",
                "likely_causes": [
                  "Uncompressed state file is provided, but a compressed one is expected.",
                  "Wrong state file provided.",
                  "Provided state file is corrupted."
                ]
              }
            },
            {
              "name": "StateDeserialization",
              "code": 4,
              "message": "Failed to deserialize state: {details}",
              "fields": [
                {
                  "name": "details",
                  "type": "string"
                }
              ],
              "doc" : {
                "description": "Failed to deserialize the state file.",
                "likely_causes": [
                  "Wrong state file provided.",
                  "Provided state file is corrupted."
                ]
              }
            },
            {
              "name": "UnknownStateVersion",
              "code": 5,
              "message": "Unknown version of the state: {version}.",
              "fields": [
                {
                  "name": "version",
                  "type": "uint"
                }
              ],
              "doc" : {
                "description": "The version of the state file is not recognized.",
                "likely_causes": [
                  "Wrong state file provided.",
                  "The state file was produced by an older version of anvil-zksync."
                ]
              }
            },
            {
              "name": "StateFileAccess",
              "code": 6,
              "message": "Error while accessing the state located at `{path}`: {reason}.",
              "fields": [
                {
                  "name": "path",
                  "type": "string"
                },
                {
                  "name": "reason",
                  "type": "string"
                }
              ],
              "doc" : {
                "description": "Failed to access the state file.",
                "likely_causes": [
                  "State file is missing.",
                  "The file permissions for the state file are insufficient."
                ]
              }
            }
          ]
        }
      ]
    }
  ]
}
